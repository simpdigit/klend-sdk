//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::ReserveFees;
use crate::generated::types::BorrowRateCurve;
use crate::generated::types::TokenInfo;
use crate::generated::types::WithdrawalCaps;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Reserve configuration values
#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ReserveConfig {
/// Status of the reserve Active/Obsolete/Hidden
pub status: u8,
/// Asset tier -> 0 - regular (collateral & debt), 1 - isolated collateral, 2 - isolated debt
pub asset_tier: u8,
/// Flat rate that goes to the host
pub host_fixed_interest_rate_bps: u16,
/// [DEPRECATED] Space that used to hold 2 fields:
/// - Boost for side (debt or collateral)
/// - Reward points multiplier per obligation type
/// Can be re-used after making sure all underlying production account data is zeroed.
pub reserved2: [u8; 9],
/// Cut of the order execution bonus that the protocol receives, as a percentage
pub protocol_order_execution_fee_pct: u8,
/// Protocol take rate is the amount borrowed interest protocol receives, as a percentage
pub protocol_take_rate_pct: u8,
/// Cut of the liquidation bonus that the protocol receives, as a percentage
pub protocol_liquidation_fee_pct: u8,
/// Target ratio of the value of borrows to deposits, as a percentage
/// 0 if use as collateral is disabled
pub loan_to_value_pct: u8,
/// Loan to value ratio at which an obligation can be liquidated, as percentage
pub liquidation_threshold_pct: u8,
/// Minimum bonus a liquidator receives when repaying part of an unhealthy obligation, as bps
pub min_liquidation_bonus_bps: u16,
/// Maximum bonus a liquidator receives when repaying part of an unhealthy obligation, as bps
pub max_liquidation_bonus_bps: u16,
/// Bad debt liquidation bonus for an undercollateralized obligation, as bps
pub bad_debt_liquidation_bonus_bps: u16,
/// Time in seconds that must pass before redemptions are enabled after the deposit limit is
/// crossed.
/// Only relevant when `autodeleverage_enabled == 1`, and must not be 0 in such case.
pub deleveraging_margin_call_period_secs: u64,
/// The rate at which the deleveraging threshold decreases, in bps per day.
/// Only relevant when `autodeleverage_enabled == 1`, and must not be 0 in such case.
pub deleveraging_threshold_decrease_bps_per_day: u64,
/// Program owner fees assessed, separate from gains due to interest accrual
pub fees: ReserveFees,
/// Borrow rate curve based on utilization
pub borrow_rate_curve: BorrowRateCurve,
/// Borrow factor in percentage - used for risk adjustment
pub borrow_factor_pct: u64,
/// Maximum deposit limit of liquidity in native units, u64::MAX for inf
pub deposit_limit: u64,
/// Maximum amount borrowed, u64::MAX for inf, 0 to disable borrows (protected deposits)
pub borrow_limit: u64,
/// Token id from TokenInfos struct
pub token_info: TokenInfo,
/// Deposit withdrawal caps - deposit & redeem
pub deposit_withdrawal_cap: WithdrawalCaps,
/// Debt withdrawal caps - borrow & repay
pub debt_withdrawal_cap: WithdrawalCaps,
pub elevation_groups: [u8; 20],
pub disable_usage_as_coll_outside_emode: u8,
/// Utilization (in percentage) above which borrowing is blocked. 0 to disable.
pub utilization_limit_block_borrowing_above_pct: u8,
/// Whether this reserve should be subject to auto-deleveraging after deposit or borrow limit is
/// crossed.
/// Besides this flag, the lending market's flag also needs to be enabled (logical `AND`).
/// **NOTE:** the manual "target LTV" deleveraging (enabled by the risk council for individual
/// obligations) is NOT affected by this flag.
pub autodeleverage_enabled: u8,
pub reserved1: [u8; 1],
/// Maximum amount liquidity of this reserve borrowed outside all elevation groups
/// - u64::MAX for inf
/// - 0 to disable borrows outside elevation groups
pub borrow_limit_outside_elevation_group: u64,
/// Defines the maximum amount (in lamports of elevation group debt asset)
/// that can be borrowed when this reserve is used as collateral.
/// - u64::MAX for inf
/// - 0 to disable borrows in this elevation group (expected value for the debt asset)
pub borrow_limit_against_this_collateral_in_elevation_group: [u64; 32],
/// The rate at which the deleveraging-related liquidation bonus increases, in bps per day.
/// Only relevant when `autodeleverage_enabled == 1`, and must not be 0 in such case.
pub deleveraging_bonus_increase_bps_per_day: u64,
}


