//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use crate::generated::types::BigFractionBytes;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Reserve liquidity
#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ReserveLiquidity {
/// Reserve liquidity mint address
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub mint_pubkey: Pubkey,
/// Reserve liquidity supply address
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub supply_vault: Pubkey,
/// Reserve liquidity fee collection address
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub fee_vault: Pubkey,
/// Reserve liquidity available
pub available_amount: u64,
/// Reserve liquidity borrowed (scaled fraction)
pub borrowed_amount_sf: u128,
/// Reserve liquidity market price in quote currency (scaled fraction)
pub market_price_sf: u128,
/// Unix timestamp of the market price (from the oracle)
pub market_price_last_updated_ts: u64,
/// Reserve liquidity mint decimals
pub mint_decimals: u64,
/// Timestamp when the last refresh reserve detected that the liquidity amount is above the deposit cap. When this threshold is crossed, then redemptions (auto-deleverage) are enabled.
/// If the threshold is not crossed, then the timestamp is set to 0
pub deposit_limit_crossed_timestamp: u64,
/// Timestamp when the last refresh reserve detected that the borrowed amount is above the borrow cap. When this threshold is crossed, then redemptions (auto-deleverage) are enabled.
/// If the threshold is not crossed, then the timestamp is set to 0
pub borrow_limit_crossed_timestamp: u64,
/// Reserve liquidity cumulative borrow rate (scaled fraction)
pub cumulative_borrow_rate_bsf: BigFractionBytes,
/// Reserve cumulative protocol fees (scaled fraction)
pub accumulated_protocol_fees_sf: u128,
/// Reserve cumulative referrer fees (scaled fraction)
pub accumulated_referrer_fees_sf: u128,
/// Reserve pending referrer fees, to be claimed in refresh_obligation by referrer or protocol (scaled fraction)
pub pending_referrer_fees_sf: u128,
/// Reserve referrer fee absolute rate calculated at each refresh_reserve operation (scaled fraction)
pub absolute_referral_rate_sf: u128,
/// Token program of the liquidity mint
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub token_program: Pubkey,
#[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
pub padding2: [u64; 51],
pub padding3: [u128; 32],
}


