//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const DEPOSIT_RESERVE_LIQUIDITY_AND_OBLIGATION_COLLATERAL_DISCRIMINATOR: [u8; 8] = [129, 199, 4, 2, 222, 39, 26, 46];

/// Accounts.
#[derive(Debug)]
pub struct DepositReserveLiquidityAndObligationCollateral {
      
              
          pub owner: solana_pubkey::Pubkey,
          
              
          pub obligation: solana_pubkey::Pubkey,
          
              
          pub lending_market: solana_pubkey::Pubkey,
          
              
          pub lending_market_authority: solana_pubkey::Pubkey,
          
              
          pub reserve: solana_pubkey::Pubkey,
          
              
          pub reserve_liquidity_mint: solana_pubkey::Pubkey,
          
              
          pub reserve_liquidity_supply: solana_pubkey::Pubkey,
          
              
          pub reserve_collateral_mint: solana_pubkey::Pubkey,
          
              
          pub reserve_destination_deposit_collateral: solana_pubkey::Pubkey,
          
              
          pub user_source_liquidity: solana_pubkey::Pubkey,
          
              
          pub placeholder_user_destination_collateral: Option<solana_pubkey::Pubkey>,
          
              
          pub collateral_token_program: solana_pubkey::Pubkey,
          
              
          pub liquidity_token_program: solana_pubkey::Pubkey,
          
              
          pub instruction_sysvar_account: solana_pubkey::Pubkey,
      }

impl DepositReserveLiquidityAndObligationCollateral {
  pub fn instruction(&self, args: DepositReserveLiquidityAndObligationCollateralInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: DepositReserveLiquidityAndObligationCollateralInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(14+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.owner,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.obligation,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.reserve_liquidity_mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve_liquidity_supply,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve_collateral_mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve_destination_deposit_collateral,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.user_source_liquidity,
            false
          ));
                                                      if let Some(placeholder_user_destination_collateral) = self.placeholder_user_destination_collateral {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                placeholder_user_destination_collateral,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                    accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.collateral_token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.liquidity_token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction_sysvar_account,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&DepositReserveLiquidityAndObligationCollateralInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositReserveLiquidityAndObligationCollateralInstructionData {
            discriminator: [u8; 8],
            }

impl DepositReserveLiquidityAndObligationCollateralInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [129, 199, 4, 2, 222, 39, 26, 46],
                                }
  }
}

impl Default for DepositReserveLiquidityAndObligationCollateralInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositReserveLiquidityAndObligationCollateralInstructionArgs {
                  pub liquidity_amount: u64,
      }


/// Instruction builder for `DepositReserveLiquidityAndObligationCollateral`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` owner
                ///   1. `[writable]` obligation
          ///   2. `[]` lending_market
          ///   3. `[]` lending_market_authority
                ///   4. `[writable]` reserve
          ///   5. `[]` reserve_liquidity_mint
                ///   6. `[writable]` reserve_liquidity_supply
                ///   7. `[writable]` reserve_collateral_mint
                ///   8. `[writable]` reserve_destination_deposit_collateral
                ///   9. `[writable]` user_source_liquidity
                ///   10. `[optional]` placeholder_user_destination_collateral
          ///   11. `[]` collateral_token_program
          ///   12. `[]` liquidity_token_program
          ///   13. `[]` instruction_sysvar_account
#[derive(Clone, Debug, Default)]
pub struct DepositReserveLiquidityAndObligationCollateralBuilder {
            owner: Option<solana_pubkey::Pubkey>,
                obligation: Option<solana_pubkey::Pubkey>,
                lending_market: Option<solana_pubkey::Pubkey>,
                lending_market_authority: Option<solana_pubkey::Pubkey>,
                reserve: Option<solana_pubkey::Pubkey>,
                reserve_liquidity_mint: Option<solana_pubkey::Pubkey>,
                reserve_liquidity_supply: Option<solana_pubkey::Pubkey>,
                reserve_collateral_mint: Option<solana_pubkey::Pubkey>,
                reserve_destination_deposit_collateral: Option<solana_pubkey::Pubkey>,
                user_source_liquidity: Option<solana_pubkey::Pubkey>,
                placeholder_user_destination_collateral: Option<solana_pubkey::Pubkey>,
                collateral_token_program: Option<solana_pubkey::Pubkey>,
                liquidity_token_program: Option<solana_pubkey::Pubkey>,
                instruction_sysvar_account: Option<solana_pubkey::Pubkey>,
                        liquidity_amount: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl DepositReserveLiquidityAndObligationCollateralBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
                        self.owner = Some(owner);
                    self
    }
            #[inline(always)]
    pub fn obligation(&mut self, obligation: solana_pubkey::Pubkey) -> &mut Self {
                        self.obligation = Some(obligation);
                    self
    }
            #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market_authority = Some(lending_market_authority);
                    self
    }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
            #[inline(always)]
    pub fn reserve_liquidity_mint(&mut self, reserve_liquidity_mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve_liquidity_mint = Some(reserve_liquidity_mint);
                    self
    }
            #[inline(always)]
    pub fn reserve_liquidity_supply(&mut self, reserve_liquidity_supply: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve_liquidity_supply = Some(reserve_liquidity_supply);
                    self
    }
            #[inline(always)]
    pub fn reserve_collateral_mint(&mut self, reserve_collateral_mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve_collateral_mint = Some(reserve_collateral_mint);
                    self
    }
            #[inline(always)]
    pub fn reserve_destination_deposit_collateral(&mut self, reserve_destination_deposit_collateral: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve_destination_deposit_collateral = Some(reserve_destination_deposit_collateral);
                    self
    }
            #[inline(always)]
    pub fn user_source_liquidity(&mut self, user_source_liquidity: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_source_liquidity = Some(user_source_liquidity);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn placeholder_user_destination_collateral(&mut self, placeholder_user_destination_collateral: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.placeholder_user_destination_collateral = placeholder_user_destination_collateral;
                    self
    }
            #[inline(always)]
    pub fn collateral_token_program(&mut self, collateral_token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.collateral_token_program = Some(collateral_token_program);
                    self
    }
            #[inline(always)]
    pub fn liquidity_token_program(&mut self, liquidity_token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.liquidity_token_program = Some(liquidity_token_program);
                    self
    }
            #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
                    #[inline(always)]
      pub fn liquidity_amount(&mut self, liquidity_amount: u64) -> &mut Self {
        self.liquidity_amount = Some(liquidity_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = DepositReserveLiquidityAndObligationCollateral {
                              owner: self.owner.expect("owner is not set"),
                                        obligation: self.obligation.expect("obligation is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        lending_market_authority: self.lending_market_authority.expect("lending_market_authority is not set"),
                                        reserve: self.reserve.expect("reserve is not set"),
                                        reserve_liquidity_mint: self.reserve_liquidity_mint.expect("reserve_liquidity_mint is not set"),
                                        reserve_liquidity_supply: self.reserve_liquidity_supply.expect("reserve_liquidity_supply is not set"),
                                        reserve_collateral_mint: self.reserve_collateral_mint.expect("reserve_collateral_mint is not set"),
                                        reserve_destination_deposit_collateral: self.reserve_destination_deposit_collateral.expect("reserve_destination_deposit_collateral is not set"),
                                        user_source_liquidity: self.user_source_liquidity.expect("user_source_liquidity is not set"),
                                        placeholder_user_destination_collateral: self.placeholder_user_destination_collateral,
                                        collateral_token_program: self.collateral_token_program.expect("collateral_token_program is not set"),
                                        liquidity_token_program: self.liquidity_token_program.expect("liquidity_token_program is not set"),
                                        instruction_sysvar_account: self.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                      };
          let args = DepositReserveLiquidityAndObligationCollateralInstructionArgs {
                                                              liquidity_amount: self.liquidity_amount.clone().expect("liquidity_amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `deposit_reserve_liquidity_and_obligation_collateral` CPI accounts.
  pub struct DepositReserveLiquidityAndObligationCollateralCpiAccounts<'a, 'b> {
          
                    
              pub owner: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub obligation: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve_liquidity_mint: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve_liquidity_supply: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve_collateral_mint: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve_destination_deposit_collateral: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub user_source_liquidity: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub placeholder_user_destination_collateral: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub collateral_token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub liquidity_token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
            }

/// `deposit_reserve_liquidity_and_obligation_collateral` CPI instruction.
pub struct DepositReserveLiquidityAndObligationCollateralCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub owner: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub obligation: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve_liquidity_mint: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve_liquidity_supply: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve_collateral_mint: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve_destination_deposit_collateral: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub user_source_liquidity: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub placeholder_user_destination_collateral: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub collateral_token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub liquidity_token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: DepositReserveLiquidityAndObligationCollateralInstructionArgs,
  }

impl<'a, 'b> DepositReserveLiquidityAndObligationCollateralCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: DepositReserveLiquidityAndObligationCollateralCpiAccounts<'a, 'b>,
              args: DepositReserveLiquidityAndObligationCollateralInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              owner: accounts.owner,
              obligation: accounts.obligation,
              lending_market: accounts.lending_market,
              lending_market_authority: accounts.lending_market_authority,
              reserve: accounts.reserve,
              reserve_liquidity_mint: accounts.reserve_liquidity_mint,
              reserve_liquidity_supply: accounts.reserve_liquidity_supply,
              reserve_collateral_mint: accounts.reserve_collateral_mint,
              reserve_destination_deposit_collateral: accounts.reserve_destination_deposit_collateral,
              user_source_liquidity: accounts.user_source_liquidity,
              placeholder_user_destination_collateral: accounts.placeholder_user_destination_collateral,
              collateral_token_program: accounts.collateral_token_program,
              liquidity_token_program: accounts.liquidity_token_program,
              instruction_sysvar_account: accounts.instruction_sysvar_account,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(14+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.owner.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.obligation.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.reserve_liquidity_mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve_liquidity_supply.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve_collateral_mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve_destination_deposit_collateral.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.user_source_liquidity.key,
            false
          ));
                                          if let Some(placeholder_user_destination_collateral) = self.placeholder_user_destination_collateral {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *placeholder_user_destination_collateral.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.collateral_token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.liquidity_token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar_account.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&DepositReserveLiquidityAndObligationCollateralInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(15 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.owner.clone());
                        account_infos.push(self.obligation.clone());
                        account_infos.push(self.lending_market.clone());
                        account_infos.push(self.lending_market_authority.clone());
                        account_infos.push(self.reserve.clone());
                        account_infos.push(self.reserve_liquidity_mint.clone());
                        account_infos.push(self.reserve_liquidity_supply.clone());
                        account_infos.push(self.reserve_collateral_mint.clone());
                        account_infos.push(self.reserve_destination_deposit_collateral.clone());
                        account_infos.push(self.user_source_liquidity.clone());
                        if let Some(placeholder_user_destination_collateral) = self.placeholder_user_destination_collateral {
          account_infos.push(placeholder_user_destination_collateral.clone());
        }
                        account_infos.push(self.collateral_token_program.clone());
                        account_infos.push(self.liquidity_token_program.clone());
                        account_infos.push(self.instruction_sysvar_account.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `DepositReserveLiquidityAndObligationCollateral` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` owner
                ///   1. `[writable]` obligation
          ///   2. `[]` lending_market
          ///   3. `[]` lending_market_authority
                ///   4. `[writable]` reserve
          ///   5. `[]` reserve_liquidity_mint
                ///   6. `[writable]` reserve_liquidity_supply
                ///   7. `[writable]` reserve_collateral_mint
                ///   8. `[writable]` reserve_destination_deposit_collateral
                ///   9. `[writable]` user_source_liquidity
                ///   10. `[optional]` placeholder_user_destination_collateral
          ///   11. `[]` collateral_token_program
          ///   12. `[]` liquidity_token_program
          ///   13. `[]` instruction_sysvar_account
#[derive(Clone, Debug)]
pub struct DepositReserveLiquidityAndObligationCollateralCpiBuilder<'a, 'b> {
  instruction: Box<DepositReserveLiquidityAndObligationCollateralCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositReserveLiquidityAndObligationCollateralCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DepositReserveLiquidityAndObligationCollateralCpiBuilderInstruction {
      __program: program,
              owner: None,
              obligation: None,
              lending_market: None,
              lending_market_authority: None,
              reserve: None,
              reserve_liquidity_mint: None,
              reserve_liquidity_supply: None,
              reserve_collateral_mint: None,
              reserve_destination_deposit_collateral: None,
              user_source_liquidity: None,
              placeholder_user_destination_collateral: None,
              collateral_token_program: None,
              liquidity_token_program: None,
              instruction_sysvar_account: None,
                                            liquidity_amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.owner = Some(owner);
                    self
    }
      #[inline(always)]
    pub fn obligation(&mut self, obligation: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.obligation = Some(obligation);
                    self
    }
      #[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market_authority = Some(lending_market_authority);
                    self
    }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
      #[inline(always)]
    pub fn reserve_liquidity_mint(&mut self, reserve_liquidity_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_liquidity_mint = Some(reserve_liquidity_mint);
                    self
    }
      #[inline(always)]
    pub fn reserve_liquidity_supply(&mut self, reserve_liquidity_supply: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_liquidity_supply = Some(reserve_liquidity_supply);
                    self
    }
      #[inline(always)]
    pub fn reserve_collateral_mint(&mut self, reserve_collateral_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_collateral_mint = Some(reserve_collateral_mint);
                    self
    }
      #[inline(always)]
    pub fn reserve_destination_deposit_collateral(&mut self, reserve_destination_deposit_collateral: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_destination_deposit_collateral = Some(reserve_destination_deposit_collateral);
                    self
    }
      #[inline(always)]
    pub fn user_source_liquidity(&mut self, user_source_liquidity: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_source_liquidity = Some(user_source_liquidity);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn placeholder_user_destination_collateral(&mut self, placeholder_user_destination_collateral: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.placeholder_user_destination_collateral = placeholder_user_destination_collateral;
                    self
    }
      #[inline(always)]
    pub fn collateral_token_program(&mut self, collateral_token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.collateral_token_program = Some(collateral_token_program);
                    self
    }
      #[inline(always)]
    pub fn liquidity_token_program(&mut self, liquidity_token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.liquidity_token_program = Some(liquidity_token_program);
                    self
    }
      #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
                    #[inline(always)]
      pub fn liquidity_amount(&mut self, liquidity_amount: u64) -> &mut Self {
        self.instruction.liquidity_amount = Some(liquidity_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = DepositReserveLiquidityAndObligationCollateralInstructionArgs {
                                                              liquidity_amount: self.instruction.liquidity_amount.clone().expect("liquidity_amount is not set"),
                                    };
        let instruction = DepositReserveLiquidityAndObligationCollateralCpi {
        __program: self.instruction.__program,
                  
          owner: self.instruction.owner.expect("owner is not set"),
                  
          obligation: self.instruction.obligation.expect("obligation is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          lending_market_authority: self.instruction.lending_market_authority.expect("lending_market_authority is not set"),
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                  
          reserve_liquidity_mint: self.instruction.reserve_liquidity_mint.expect("reserve_liquidity_mint is not set"),
                  
          reserve_liquidity_supply: self.instruction.reserve_liquidity_supply.expect("reserve_liquidity_supply is not set"),
                  
          reserve_collateral_mint: self.instruction.reserve_collateral_mint.expect("reserve_collateral_mint is not set"),
                  
          reserve_destination_deposit_collateral: self.instruction.reserve_destination_deposit_collateral.expect("reserve_destination_deposit_collateral is not set"),
                  
          user_source_liquidity: self.instruction.user_source_liquidity.expect("user_source_liquidity is not set"),
                  
          placeholder_user_destination_collateral: self.instruction.placeholder_user_destination_collateral,
                  
          collateral_token_program: self.instruction.collateral_token_program.expect("collateral_token_program is not set"),
                  
          liquidity_token_program: self.instruction.liquidity_token_program.expect("liquidity_token_program is not set"),
                  
          instruction_sysvar_account: self.instruction.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DepositReserveLiquidityAndObligationCollateralCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            owner: Option<&'b solana_account_info::AccountInfo<'a>>,
                obligation: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_liquidity_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_liquidity_supply: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_collateral_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_destination_deposit_collateral: Option<&'b solana_account_info::AccountInfo<'a>>,
                user_source_liquidity: Option<&'b solana_account_info::AccountInfo<'a>>,
                placeholder_user_destination_collateral: Option<&'b solana_account_info::AccountInfo<'a>>,
                collateral_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                liquidity_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                instruction_sysvar_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                        liquidity_amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

