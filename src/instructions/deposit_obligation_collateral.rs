//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const DEPOSIT_OBLIGATION_COLLATERAL_DISCRIMINATOR: [u8; 8] = [108, 209, 4, 72, 21, 22, 118, 133];

/// Accounts.
#[derive(Debug)]
pub struct DepositObligationCollateral {
      
              
          pub owner: solana_pubkey::Pubkey,
          
              
          pub obligation: solana_pubkey::Pubkey,
          
              
          pub lending_market: solana_pubkey::Pubkey,
          
              
          pub deposit_reserve: solana_pubkey::Pubkey,
          
              
          pub reserve_destination_collateral: solana_pubkey::Pubkey,
          
              
          pub user_source_collateral: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
          
              
          pub instruction_sysvar_account: solana_pubkey::Pubkey,
      }

impl DepositObligationCollateral {
  pub fn instruction(&self, args: DepositObligationCollateralInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: DepositObligationCollateralInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.obligation,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.deposit_reserve,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve_destination_collateral,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.user_source_collateral,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction_sysvar_account,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&DepositObligationCollateralInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositObligationCollateralInstructionData {
            discriminator: [u8; 8],
            }

impl DepositObligationCollateralInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [108, 209, 4, 72, 21, 22, 118, 133],
                                }
  }
}

impl Default for DepositObligationCollateralInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DepositObligationCollateralInstructionArgs {
                  pub collateral_amount: u64,
      }


/// Instruction builder for `DepositObligationCollateral`.
///
/// ### Accounts:
///
                ///   0. `[signer]` owner
                ///   1. `[writable]` obligation
          ///   2. `[]` lending_market
                ///   3. `[writable]` deposit_reserve
                ///   4. `[writable]` reserve_destination_collateral
                ///   5. `[writable]` user_source_collateral
          ///   6. `[]` token_program
          ///   7. `[]` instruction_sysvar_account
#[derive(Clone, Debug, Default)]
pub struct DepositObligationCollateralBuilder {
            owner: Option<solana_pubkey::Pubkey>,
                obligation: Option<solana_pubkey::Pubkey>,
                lending_market: Option<solana_pubkey::Pubkey>,
                deposit_reserve: Option<solana_pubkey::Pubkey>,
                reserve_destination_collateral: Option<solana_pubkey::Pubkey>,
                user_source_collateral: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                instruction_sysvar_account: Option<solana_pubkey::Pubkey>,
                        collateral_amount: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl DepositObligationCollateralBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
                        self.owner = Some(owner);
                    self
    }
            #[inline(always)]
    pub fn obligation(&mut self, obligation: solana_pubkey::Pubkey) -> &mut Self {
                        self.obligation = Some(obligation);
                    self
    }
            #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            #[inline(always)]
    pub fn deposit_reserve(&mut self, deposit_reserve: solana_pubkey::Pubkey) -> &mut Self {
                        self.deposit_reserve = Some(deposit_reserve);
                    self
    }
            #[inline(always)]
    pub fn reserve_destination_collateral(&mut self, reserve_destination_collateral: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve_destination_collateral = Some(reserve_destination_collateral);
                    self
    }
            #[inline(always)]
    pub fn user_source_collateral(&mut self, user_source_collateral: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_source_collateral = Some(user_source_collateral);
                    self
    }
            #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
                    #[inline(always)]
      pub fn collateral_amount(&mut self, collateral_amount: u64) -> &mut Self {
        self.collateral_amount = Some(collateral_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = DepositObligationCollateral {
                              owner: self.owner.expect("owner is not set"),
                                        obligation: self.obligation.expect("obligation is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        deposit_reserve: self.deposit_reserve.expect("deposit_reserve is not set"),
                                        reserve_destination_collateral: self.reserve_destination_collateral.expect("reserve_destination_collateral is not set"),
                                        user_source_collateral: self.user_source_collateral.expect("user_source_collateral is not set"),
                                        token_program: self.token_program.expect("token_program is not set"),
                                        instruction_sysvar_account: self.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                      };
          let args = DepositObligationCollateralInstructionArgs {
                                                              collateral_amount: self.collateral_amount.clone().expect("collateral_amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `deposit_obligation_collateral` CPI accounts.
  pub struct DepositObligationCollateralCpiAccounts<'a, 'b> {
          
                    
              pub owner: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub obligation: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub deposit_reserve: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve_destination_collateral: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub user_source_collateral: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
            }

/// `deposit_obligation_collateral` CPI instruction.
pub struct DepositObligationCollateralCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub owner: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub obligation: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub deposit_reserve: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve_destination_collateral: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub user_source_collateral: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: DepositObligationCollateralInstructionArgs,
  }

impl<'a, 'b> DepositObligationCollateralCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: DepositObligationCollateralCpiAccounts<'a, 'b>,
              args: DepositObligationCollateralInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              owner: accounts.owner,
              obligation: accounts.obligation,
              lending_market: accounts.lending_market,
              deposit_reserve: accounts.deposit_reserve,
              reserve_destination_collateral: accounts.reserve_destination_collateral,
              user_source_collateral: accounts.user_source_collateral,
              token_program: accounts.token_program,
              instruction_sysvar_account: accounts.instruction_sysvar_account,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.obligation.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.deposit_reserve.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve_destination_collateral.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.user_source_collateral.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar_account.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&DepositObligationCollateralInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.owner.clone());
                        account_infos.push(self.obligation.clone());
                        account_infos.push(self.lending_market.clone());
                        account_infos.push(self.deposit_reserve.clone());
                        account_infos.push(self.reserve_destination_collateral.clone());
                        account_infos.push(self.user_source_collateral.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.instruction_sysvar_account.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `DepositObligationCollateral` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` owner
                ///   1. `[writable]` obligation
          ///   2. `[]` lending_market
                ///   3. `[writable]` deposit_reserve
                ///   4. `[writable]` reserve_destination_collateral
                ///   5. `[writable]` user_source_collateral
          ///   6. `[]` token_program
          ///   7. `[]` instruction_sysvar_account
#[derive(Clone, Debug)]
pub struct DepositObligationCollateralCpiBuilder<'a, 'b> {
  instruction: Box<DepositObligationCollateralCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositObligationCollateralCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DepositObligationCollateralCpiBuilderInstruction {
      __program: program,
              owner: None,
              obligation: None,
              lending_market: None,
              deposit_reserve: None,
              reserve_destination_collateral: None,
              user_source_collateral: None,
              token_program: None,
              instruction_sysvar_account: None,
                                            collateral_amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.owner = Some(owner);
                    self
    }
      #[inline(always)]
    pub fn obligation(&mut self, obligation: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.obligation = Some(obligation);
                    self
    }
      #[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      #[inline(always)]
    pub fn deposit_reserve(&mut self, deposit_reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.deposit_reserve = Some(deposit_reserve);
                    self
    }
      #[inline(always)]
    pub fn reserve_destination_collateral(&mut self, reserve_destination_collateral: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_destination_collateral = Some(reserve_destination_collateral);
                    self
    }
      #[inline(always)]
    pub fn user_source_collateral(&mut self, user_source_collateral: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_source_collateral = Some(user_source_collateral);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
                    #[inline(always)]
      pub fn collateral_amount(&mut self, collateral_amount: u64) -> &mut Self {
        self.instruction.collateral_amount = Some(collateral_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = DepositObligationCollateralInstructionArgs {
                                                              collateral_amount: self.instruction.collateral_amount.clone().expect("collateral_amount is not set"),
                                    };
        let instruction = DepositObligationCollateralCpi {
        __program: self.instruction.__program,
                  
          owner: self.instruction.owner.expect("owner is not set"),
                  
          obligation: self.instruction.obligation.expect("obligation is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          deposit_reserve: self.instruction.deposit_reserve.expect("deposit_reserve is not set"),
                  
          reserve_destination_collateral: self.instruction.reserve_destination_collateral.expect("reserve_destination_collateral is not set"),
                  
          user_source_collateral: self.instruction.user_source_collateral.expect("user_source_collateral is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          instruction_sysvar_account: self.instruction.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DepositObligationCollateralCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            owner: Option<&'b solana_account_info::AccountInfo<'a>>,
                obligation: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_account_info::AccountInfo<'a>>,
                deposit_reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_destination_collateral: Option<&'b solana_account_info::AccountInfo<'a>>,
                user_source_collateral: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                instruction_sysvar_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                        collateral_amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

