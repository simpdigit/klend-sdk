//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::ReserveFarmKind;
use crate::generated::types::AssetTier;
use crate::generated::types::FeeCalculation;
use crate::generated::types::ReserveStatus;
use crate::generated::types::UpdateConfigMode;
use crate::generated::types::UpdateLendingMarketConfigValue;
use crate::generated::types::UpdateLendingMarketMode;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const IDL_MISSING_TYPES_DISCRIMINATOR: [u8; 8] = [130, 80, 38, 153, 80, 212, 182, 253];

/// Accounts.
#[derive(Debug)]
pub struct IdlMissingTypes {
      
              
          pub signer: solana_pubkey::Pubkey,
          
              
          pub global_config: solana_pubkey::Pubkey,
          
              
          pub lending_market: solana_pubkey::Pubkey,
          
              
          pub reserve: solana_pubkey::Pubkey,
      }

impl IdlMissingTypes {
  pub fn instruction(&self, args: IdlMissingTypesInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: IdlMissingTypesInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.signer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&IdlMissingTypesInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct IdlMissingTypesInstructionData {
            discriminator: [u8; 8],
                                                }

impl IdlMissingTypesInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [130, 80, 38, 153, 80, 212, 182, 253],
                                                                                                                    }
  }
}

impl Default for IdlMissingTypesInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct IdlMissingTypesInstructionArgs {
                  pub reserve_farm_kind: ReserveFarmKind,
                pub asset_tier: AssetTier,
                pub fee_calculation: FeeCalculation,
                pub reserve_status: ReserveStatus,
                pub update_config_mode: UpdateConfigMode,
                pub update_lending_market_config_value: UpdateLendingMarketConfigValue,
                pub update_lending_market_config_mode: UpdateLendingMarketMode,
      }


/// Instruction builder for `IdlMissingTypes`.
///
/// ### Accounts:
///
                ///   0. `[signer]` signer
          ///   1. `[]` global_config
          ///   2. `[]` lending_market
                ///   3. `[writable]` reserve
#[derive(Clone, Debug, Default)]
pub struct IdlMissingTypesBuilder {
            signer: Option<solana_pubkey::Pubkey>,
                global_config: Option<solana_pubkey::Pubkey>,
                lending_market: Option<solana_pubkey::Pubkey>,
                reserve: Option<solana_pubkey::Pubkey>,
                        reserve_farm_kind: Option<ReserveFarmKind>,
                asset_tier: Option<AssetTier>,
                fee_calculation: Option<FeeCalculation>,
                reserve_status: Option<ReserveStatus>,
                update_config_mode: Option<UpdateConfigMode>,
                update_lending_market_config_value: Option<UpdateLendingMarketConfigValue>,
                update_lending_market_config_mode: Option<UpdateLendingMarketMode>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl IdlMissingTypesBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_config = Some(global_config);
                    self
    }
            #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
                    #[inline(always)]
      pub fn reserve_farm_kind(&mut self, reserve_farm_kind: ReserveFarmKind) -> &mut Self {
        self.reserve_farm_kind = Some(reserve_farm_kind);
        self
      }
                #[inline(always)]
      pub fn asset_tier(&mut self, asset_tier: AssetTier) -> &mut Self {
        self.asset_tier = Some(asset_tier);
        self
      }
                #[inline(always)]
      pub fn fee_calculation(&mut self, fee_calculation: FeeCalculation) -> &mut Self {
        self.fee_calculation = Some(fee_calculation);
        self
      }
                #[inline(always)]
      pub fn reserve_status(&mut self, reserve_status: ReserveStatus) -> &mut Self {
        self.reserve_status = Some(reserve_status);
        self
      }
                #[inline(always)]
      pub fn update_config_mode(&mut self, update_config_mode: UpdateConfigMode) -> &mut Self {
        self.update_config_mode = Some(update_config_mode);
        self
      }
                #[inline(always)]
      pub fn update_lending_market_config_value(&mut self, update_lending_market_config_value: UpdateLendingMarketConfigValue) -> &mut Self {
        self.update_lending_market_config_value = Some(update_lending_market_config_value);
        self
      }
                #[inline(always)]
      pub fn update_lending_market_config_mode(&mut self, update_lending_market_config_mode: UpdateLendingMarketMode) -> &mut Self {
        self.update_lending_market_config_mode = Some(update_lending_market_config_mode);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = IdlMissingTypes {
                              signer: self.signer.expect("signer is not set"),
                                        global_config: self.global_config.expect("global_config is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        reserve: self.reserve.expect("reserve is not set"),
                      };
          let args = IdlMissingTypesInstructionArgs {
                                                              reserve_farm_kind: self.reserve_farm_kind.clone().expect("reserve_farm_kind is not set"),
                                                                  asset_tier: self.asset_tier.clone().expect("asset_tier is not set"),
                                                                  fee_calculation: self.fee_calculation.clone().expect("fee_calculation is not set"),
                                                                  reserve_status: self.reserve_status.clone().expect("reserve_status is not set"),
                                                                  update_config_mode: self.update_config_mode.clone().expect("update_config_mode is not set"),
                                                                  update_lending_market_config_value: self.update_lending_market_config_value.clone().expect("update_lending_market_config_value is not set"),
                                                                  update_lending_market_config_mode: self.update_lending_market_config_mode.clone().expect("update_lending_market_config_mode is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `idl_missing_types` CPI accounts.
  pub struct IdlMissingTypesCpiAccounts<'a, 'b> {
          
                    
              pub signer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub global_config: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve: &'b solana_account_info::AccountInfo<'a>,
            }

/// `idl_missing_types` CPI instruction.
pub struct IdlMissingTypesCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub signer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub global_config: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: IdlMissingTypesInstructionArgs,
  }

impl<'a, 'b> IdlMissingTypesCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: IdlMissingTypesCpiAccounts<'a, 'b>,
              args: IdlMissingTypesInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              signer: accounts.signer,
              global_config: accounts.global_config,
              lending_market: accounts.lending_market,
              reserve: accounts.reserve,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&IdlMissingTypesInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.signer.clone());
                        account_infos.push(self.global_config.clone());
                        account_infos.push(self.lending_market.clone());
                        account_infos.push(self.reserve.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `IdlMissingTypes` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` signer
          ///   1. `[]` global_config
          ///   2. `[]` lending_market
                ///   3. `[writable]` reserve
#[derive(Clone, Debug)]
pub struct IdlMissingTypesCpiBuilder<'a, 'b> {
  instruction: Box<IdlMissingTypesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> IdlMissingTypesCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(IdlMissingTypesCpiBuilderInstruction {
      __program: program,
              signer: None,
              global_config: None,
              lending_market: None,
              reserve: None,
                                            reserve_farm_kind: None,
                                asset_tier: None,
                                fee_calculation: None,
                                reserve_status: None,
                                update_config_mode: None,
                                update_lending_market_config_value: None,
                                update_lending_market_config_mode: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      #[inline(always)]
    pub fn global_config(&mut self, global_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_config = Some(global_config);
                    self
    }
      #[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
                    #[inline(always)]
      pub fn reserve_farm_kind(&mut self, reserve_farm_kind: ReserveFarmKind) -> &mut Self {
        self.instruction.reserve_farm_kind = Some(reserve_farm_kind);
        self
      }
                #[inline(always)]
      pub fn asset_tier(&mut self, asset_tier: AssetTier) -> &mut Self {
        self.instruction.asset_tier = Some(asset_tier);
        self
      }
                #[inline(always)]
      pub fn fee_calculation(&mut self, fee_calculation: FeeCalculation) -> &mut Self {
        self.instruction.fee_calculation = Some(fee_calculation);
        self
      }
                #[inline(always)]
      pub fn reserve_status(&mut self, reserve_status: ReserveStatus) -> &mut Self {
        self.instruction.reserve_status = Some(reserve_status);
        self
      }
                #[inline(always)]
      pub fn update_config_mode(&mut self, update_config_mode: UpdateConfigMode) -> &mut Self {
        self.instruction.update_config_mode = Some(update_config_mode);
        self
      }
                #[inline(always)]
      pub fn update_lending_market_config_value(&mut self, update_lending_market_config_value: UpdateLendingMarketConfigValue) -> &mut Self {
        self.instruction.update_lending_market_config_value = Some(update_lending_market_config_value);
        self
      }
                #[inline(always)]
      pub fn update_lending_market_config_mode(&mut self, update_lending_market_config_mode: UpdateLendingMarketMode) -> &mut Self {
        self.instruction.update_lending_market_config_mode = Some(update_lending_market_config_mode);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = IdlMissingTypesInstructionArgs {
                                                              reserve_farm_kind: self.instruction.reserve_farm_kind.clone().expect("reserve_farm_kind is not set"),
                                                                  asset_tier: self.instruction.asset_tier.clone().expect("asset_tier is not set"),
                                                                  fee_calculation: self.instruction.fee_calculation.clone().expect("fee_calculation is not set"),
                                                                  reserve_status: self.instruction.reserve_status.clone().expect("reserve_status is not set"),
                                                                  update_config_mode: self.instruction.update_config_mode.clone().expect("update_config_mode is not set"),
                                                                  update_lending_market_config_value: self.instruction.update_lending_market_config_value.clone().expect("update_lending_market_config_value is not set"),
                                                                  update_lending_market_config_mode: self.instruction.update_lending_market_config_mode.clone().expect("update_lending_market_config_mode is not set"),
                                    };
        let instruction = IdlMissingTypesCpi {
        __program: self.instruction.__program,
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          global_config: self.instruction.global_config.expect("global_config is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct IdlMissingTypesCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            signer: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
                        reserve_farm_kind: Option<ReserveFarmKind>,
                asset_tier: Option<AssetTier>,
                fee_calculation: Option<FeeCalculation>,
                reserve_status: Option<ReserveStatus>,
                update_config_mode: Option<UpdateConfigMode>,
                update_lending_market_config_value: Option<UpdateLendingMarketConfigValue>,
                update_lending_market_config_mode: Option<UpdateLendingMarketMode>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

