//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const INIT_FARMS_FOR_RESERVE_DISCRIMINATOR: [u8; 8] = [218, 6, 62, 233, 1, 33, 232, 82];

/// Accounts.
#[derive(Debug)]
pub struct InitFarmsForReserve {
      
              
          pub lending_market_owner: solana_pubkey::Pubkey,
          
              
          pub lending_market: solana_pubkey::Pubkey,
          
              
          pub lending_market_authority: solana_pubkey::Pubkey,
          
              
          pub reserve: solana_pubkey::Pubkey,
          
              
          pub farms_program: solana_pubkey::Pubkey,
          
              
          pub farms_global_config: solana_pubkey::Pubkey,
          
              
          pub farm_state: solana_pubkey::Pubkey,
          
              
          pub farms_vault_authority: solana_pubkey::Pubkey,
          
              
          pub rent: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl InitFarmsForReserve {
  pub fn instruction(&self, args: InitFarmsForReserveInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitFarmsForReserveInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.lending_market_owner,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.farms_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.farms_global_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.farm_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.farms_vault_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitFarmsForReserveInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitFarmsForReserveInstructionData {
            discriminator: [u8; 8],
            }

impl InitFarmsForReserveInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [218, 6, 62, 233, 1, 33, 232, 82],
                                }
  }
}

impl Default for InitFarmsForReserveInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitFarmsForReserveInstructionArgs {
                  pub mode: u8,
      }


/// Instruction builder for `InitFarmsForReserve`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` lending_market_owner
          ///   1. `[]` lending_market
          ///   2. `[]` lending_market_authority
                ///   3. `[writable]` reserve
          ///   4. `[]` farms_program
          ///   5. `[]` farms_global_config
                ///   6. `[writable]` farm_state
          ///   7. `[]` farms_vault_authority
          ///   8. `[]` rent
          ///   9. `[]` system_program
#[derive(Clone, Debug, Default)]
pub struct InitFarmsForReserveBuilder {
            lending_market_owner: Option<solana_pubkey::Pubkey>,
                lending_market: Option<solana_pubkey::Pubkey>,
                lending_market_authority: Option<solana_pubkey::Pubkey>,
                reserve: Option<solana_pubkey::Pubkey>,
                farms_program: Option<solana_pubkey::Pubkey>,
                farms_global_config: Option<solana_pubkey::Pubkey>,
                farm_state: Option<solana_pubkey::Pubkey>,
                farms_vault_authority: Option<solana_pubkey::Pubkey>,
                rent: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        mode: Option<u8>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitFarmsForReserveBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn lending_market_owner(&mut self, lending_market_owner: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market_owner = Some(lending_market_owner);
                    self
    }
            #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market_authority = Some(lending_market_authority);
                    self
    }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
            #[inline(always)]
    pub fn farms_program(&mut self, farms_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.farms_program = Some(farms_program);
                    self
    }
            #[inline(always)]
    pub fn farms_global_config(&mut self, farms_global_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.farms_global_config = Some(farms_global_config);
                    self
    }
            #[inline(always)]
    pub fn farm_state(&mut self, farm_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.farm_state = Some(farm_state);
                    self
    }
            #[inline(always)]
    pub fn farms_vault_authority(&mut self, farms_vault_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.farms_vault_authority = Some(farms_vault_authority);
                    self
    }
            #[inline(always)]
    pub fn rent(&mut self, rent: solana_pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn mode(&mut self, mode: u8) -> &mut Self {
        self.mode = Some(mode);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = InitFarmsForReserve {
                              lending_market_owner: self.lending_market_owner.expect("lending_market_owner is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        lending_market_authority: self.lending_market_authority.expect("lending_market_authority is not set"),
                                        reserve: self.reserve.expect("reserve is not set"),
                                        farms_program: self.farms_program.expect("farms_program is not set"),
                                        farms_global_config: self.farms_global_config.expect("farms_global_config is not set"),
                                        farm_state: self.farm_state.expect("farm_state is not set"),
                                        farms_vault_authority: self.farms_vault_authority.expect("farms_vault_authority is not set"),
                                        rent: self.rent.expect("rent is not set"),
                                        system_program: self.system_program.expect("system_program is not set"),
                      };
          let args = InitFarmsForReserveInstructionArgs {
                                                              mode: self.mode.clone().expect("mode is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `init_farms_for_reserve` CPI accounts.
  pub struct InitFarmsForReserveCpiAccounts<'a, 'b> {
          
                    
              pub lending_market_owner: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub farms_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub farms_global_config: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub farm_state: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub farms_vault_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `init_farms_for_reserve` CPI instruction.
pub struct InitFarmsForReserveCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub lending_market_owner: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub farms_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub farms_global_config: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub farm_state: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub farms_vault_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitFarmsForReserveInstructionArgs,
  }

impl<'a, 'b> InitFarmsForReserveCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: InitFarmsForReserveCpiAccounts<'a, 'b>,
              args: InitFarmsForReserveInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              lending_market_owner: accounts.lending_market_owner,
              lending_market: accounts.lending_market,
              lending_market_authority: accounts.lending_market_authority,
              reserve: accounts.reserve,
              farms_program: accounts.farms_program,
              farms_global_config: accounts.farms_global_config,
              farm_state: accounts.farm_state,
              farms_vault_authority: accounts.farms_vault_authority,
              rent: accounts.rent,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.lending_market_owner.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.farms_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.farms_global_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.farm_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.farms_vault_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitFarmsForReserveInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.lending_market_owner.clone());
                        account_infos.push(self.lending_market.clone());
                        account_infos.push(self.lending_market_authority.clone());
                        account_infos.push(self.reserve.clone());
                        account_infos.push(self.farms_program.clone());
                        account_infos.push(self.farms_global_config.clone());
                        account_infos.push(self.farm_state.clone());
                        account_infos.push(self.farms_vault_authority.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitFarmsForReserve` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` lending_market_owner
          ///   1. `[]` lending_market
          ///   2. `[]` lending_market_authority
                ///   3. `[writable]` reserve
          ///   4. `[]` farms_program
          ///   5. `[]` farms_global_config
                ///   6. `[writable]` farm_state
          ///   7. `[]` farms_vault_authority
          ///   8. `[]` rent
          ///   9. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitFarmsForReserveCpiBuilder<'a, 'b> {
  instruction: Box<InitFarmsForReserveCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitFarmsForReserveCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitFarmsForReserveCpiBuilderInstruction {
      __program: program,
              lending_market_owner: None,
              lending_market: None,
              lending_market_authority: None,
              reserve: None,
              farms_program: None,
              farms_global_config: None,
              farm_state: None,
              farms_vault_authority: None,
              rent: None,
              system_program: None,
                                            mode: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn lending_market_owner(&mut self, lending_market_owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market_owner = Some(lending_market_owner);
                    self
    }
      #[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market_authority = Some(lending_market_authority);
                    self
    }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
      #[inline(always)]
    pub fn farms_program(&mut self, farms_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.farms_program = Some(farms_program);
                    self
    }
      #[inline(always)]
    pub fn farms_global_config(&mut self, farms_global_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.farms_global_config = Some(farms_global_config);
                    self
    }
      #[inline(always)]
    pub fn farm_state(&mut self, farm_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.farm_state = Some(farm_state);
                    self
    }
      #[inline(always)]
    pub fn farms_vault_authority(&mut self, farms_vault_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.farms_vault_authority = Some(farms_vault_authority);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn mode(&mut self, mode: u8) -> &mut Self {
        self.instruction.mode = Some(mode);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = InitFarmsForReserveInstructionArgs {
                                                              mode: self.instruction.mode.clone().expect("mode is not set"),
                                    };
        let instruction = InitFarmsForReserveCpi {
        __program: self.instruction.__program,
                  
          lending_market_owner: self.instruction.lending_market_owner.expect("lending_market_owner is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          lending_market_authority: self.instruction.lending_market_authority.expect("lending_market_authority is not set"),
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                  
          farms_program: self.instruction.farms_program.expect("farms_program is not set"),
                  
          farms_global_config: self.instruction.farms_global_config.expect("farms_global_config is not set"),
                  
          farm_state: self.instruction.farm_state.expect("farm_state is not set"),
                  
          farms_vault_authority: self.instruction.farms_vault_authority.expect("farms_vault_authority is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitFarmsForReserveCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            lending_market_owner: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
                farms_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                farms_global_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                farm_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                farms_vault_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        mode: Option<u8>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

