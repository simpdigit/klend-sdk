//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const REFRESH_RESERVE_DISCRIMINATOR: [u8; 8] = [2, 218, 138, 235, 79, 201, 25, 102];

/// Accounts.
#[derive(Debug)]
pub struct RefreshReserve {
      
              
          pub reserve: solana_pubkey::Pubkey,
          
              
          pub lending_market: solana_pubkey::Pubkey,
          
              
          pub pyth_oracle: Option<solana_pubkey::Pubkey>,
          
              
          pub switchboard_price_oracle: Option<solana_pubkey::Pubkey>,
          
              
          pub switchboard_twap_oracle: Option<solana_pubkey::Pubkey>,
          
              
          pub scope_prices: Option<solana_pubkey::Pubkey>,
      }

impl RefreshReserve {
  pub fn instruction(&self) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.reserve,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                                      if let Some(pyth_oracle) = self.pyth_oracle {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                pyth_oracle,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                                if let Some(switchboard_price_oracle) = self.switchboard_price_oracle {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                switchboard_price_oracle,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                                if let Some(switchboard_twap_oracle) = self.switchboard_twap_oracle {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                switchboard_twap_oracle,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                                if let Some(scope_prices) = self.scope_prices {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                scope_prices,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&RefreshReserveInstructionData::new()).unwrap();
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RefreshReserveInstructionData {
            discriminator: [u8; 8],
      }

impl RefreshReserveInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [2, 218, 138, 235, 79, 201, 25, 102],
                  }
  }
}

impl Default for RefreshReserveInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `RefreshReserve`.
///
/// ### Accounts:
///
                ///   0. `[writable]` reserve
          ///   1. `[]` lending_market
                ///   2. `[optional]` pyth_oracle
                ///   3. `[optional]` switchboard_price_oracle
                ///   4. `[optional]` switchboard_twap_oracle
                ///   5. `[optional]` scope_prices
#[derive(Clone, Debug, Default)]
pub struct RefreshReserveBuilder {
            reserve: Option<solana_pubkey::Pubkey>,
                lending_market: Option<solana_pubkey::Pubkey>,
                pyth_oracle: Option<solana_pubkey::Pubkey>,
                switchboard_price_oracle: Option<solana_pubkey::Pubkey>,
                switchboard_twap_oracle: Option<solana_pubkey::Pubkey>,
                scope_prices: Option<solana_pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RefreshReserveBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
            #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn pyth_oracle(&mut self, pyth_oracle: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.pyth_oracle = pyth_oracle;
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn switchboard_price_oracle(&mut self, switchboard_price_oracle: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.switchboard_price_oracle = switchboard_price_oracle;
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn switchboard_twap_oracle(&mut self, switchboard_twap_oracle: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.switchboard_twap_oracle = switchboard_twap_oracle;
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn scope_prices(&mut self, scope_prices: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.scope_prices = scope_prices;
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = RefreshReserve {
                              reserve: self.reserve.expect("reserve is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        pyth_oracle: self.pyth_oracle,
                                        switchboard_price_oracle: self.switchboard_price_oracle,
                                        switchboard_twap_oracle: self.switchboard_twap_oracle,
                                        scope_prices: self.scope_prices,
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `refresh_reserve` CPI accounts.
  pub struct RefreshReserveCpiAccounts<'a, 'b> {
          
                    
              pub reserve: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub pyth_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub switchboard_price_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub switchboard_twap_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub scope_prices: Option<&'b solana_account_info::AccountInfo<'a>>,
            }

/// `refresh_reserve` CPI instruction.
pub struct RefreshReserveCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub reserve: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub pyth_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub switchboard_price_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub switchboard_twap_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub scope_prices: Option<&'b solana_account_info::AccountInfo<'a>>,
        }

impl<'a, 'b> RefreshReserveCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: RefreshReserveCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              reserve: accounts.reserve,
              lending_market: accounts.lending_market,
              pyth_oracle: accounts.pyth_oracle,
              switchboard_price_oracle: accounts.switchboard_price_oracle,
              switchboard_twap_oracle: accounts.switchboard_twap_oracle,
              scope_prices: accounts.scope_prices,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          if let Some(pyth_oracle) = self.pyth_oracle {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *pyth_oracle.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          if let Some(switchboard_price_oracle) = self.switchboard_price_oracle {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *switchboard_price_oracle.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          if let Some(switchboard_twap_oracle) = self.switchboard_twap_oracle {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *switchboard_twap_oracle.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          if let Some(scope_prices) = self.scope_prices {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *scope_prices.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&RefreshReserveInstructionData::new()).unwrap();
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.reserve.clone());
                        account_infos.push(self.lending_market.clone());
                        if let Some(pyth_oracle) = self.pyth_oracle {
          account_infos.push(pyth_oracle.clone());
        }
                        if let Some(switchboard_price_oracle) = self.switchboard_price_oracle {
          account_infos.push(switchboard_price_oracle.clone());
        }
                        if let Some(switchboard_twap_oracle) = self.switchboard_twap_oracle {
          account_infos.push(switchboard_twap_oracle.clone());
        }
                        if let Some(scope_prices) = self.scope_prices {
          account_infos.push(scope_prices.clone());
        }
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `RefreshReserve` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` reserve
          ///   1. `[]` lending_market
                ///   2. `[optional]` pyth_oracle
                ///   3. `[optional]` switchboard_price_oracle
                ///   4. `[optional]` switchboard_twap_oracle
                ///   5. `[optional]` scope_prices
#[derive(Clone, Debug)]
pub struct RefreshReserveCpiBuilder<'a, 'b> {
  instruction: Box<RefreshReserveCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RefreshReserveCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(RefreshReserveCpiBuilderInstruction {
      __program: program,
              reserve: None,
              lending_market: None,
              pyth_oracle: None,
              switchboard_price_oracle: None,
              switchboard_twap_oracle: None,
              scope_prices: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
      #[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn pyth_oracle(&mut self, pyth_oracle: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.pyth_oracle = pyth_oracle;
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn switchboard_price_oracle(&mut self, switchboard_price_oracle: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.switchboard_price_oracle = switchboard_price_oracle;
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn switchboard_twap_oracle(&mut self, switchboard_twap_oracle: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.switchboard_twap_oracle = switchboard_twap_oracle;
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn scope_prices(&mut self, scope_prices: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.scope_prices = scope_prices;
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = RefreshReserveCpi {
        __program: self.instruction.__program,
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          pyth_oracle: self.instruction.pyth_oracle,
                  
          switchboard_price_oracle: self.instruction.switchboard_price_oracle,
                  
          switchboard_twap_oracle: self.instruction.switchboard_twap_oracle,
                  
          scope_prices: self.instruction.scope_prices,
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct RefreshReserveCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_account_info::AccountInfo<'a>>,
                pyth_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
                switchboard_price_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
                switchboard_twap_oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
                scope_prices: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

