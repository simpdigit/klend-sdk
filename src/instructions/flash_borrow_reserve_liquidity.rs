//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const FLASH_BORROW_RESERVE_LIQUIDITY_DISCRIMINATOR: [u8; 8] = [135, 231, 52, 167, 7, 52, 212, 193];

/// Accounts.
#[derive(Debug)]
pub struct FlashBorrowReserveLiquidity {
      
              
          pub user_transfer_authority: solana_pubkey::Pubkey,
          
              
          pub lending_market_authority: solana_pubkey::Pubkey,
          
              
          pub lending_market: solana_pubkey::Pubkey,
          
              
          pub reserve: solana_pubkey::Pubkey,
          
              
          pub reserve_liquidity_mint: solana_pubkey::Pubkey,
          
              
          pub reserve_source_liquidity: solana_pubkey::Pubkey,
          
              
          pub user_destination_liquidity: solana_pubkey::Pubkey,
          
              
          pub reserve_liquidity_fee_receiver: solana_pubkey::Pubkey,
          
              
          pub referrer_token_state: Option<solana_pubkey::Pubkey>,
          
              
          pub referrer_account: Option<solana_pubkey::Pubkey>,
          
              
          pub sysvar_info: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
      }

impl FlashBorrowReserveLiquidity {
  pub fn instruction(&self, args: FlashBorrowReserveLiquidityInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: FlashBorrowReserveLiquidityInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(12+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.user_transfer_authority,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.reserve_liquidity_mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve_source_liquidity,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.user_destination_liquidity,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve_liquidity_fee_receiver,
            false
          ));
                                                      if let Some(referrer_token_state) = self.referrer_token_state {
              accounts.push(solana_instruction::AccountMeta::new(
                referrer_token_state,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                                if let Some(referrer_account) = self.referrer_account {
              accounts.push(solana_instruction::AccountMeta::new(
                referrer_account,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                    accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.sysvar_info,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&FlashBorrowReserveLiquidityInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct FlashBorrowReserveLiquidityInstructionData {
            discriminator: [u8; 8],
            }

impl FlashBorrowReserveLiquidityInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [135, 231, 52, 167, 7, 52, 212, 193],
                                }
  }
}

impl Default for FlashBorrowReserveLiquidityInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct FlashBorrowReserveLiquidityInstructionArgs {
                  pub liquidity_amount: u64,
      }


/// Instruction builder for `FlashBorrowReserveLiquidity`.
///
/// ### Accounts:
///
                ///   0. `[signer]` user_transfer_authority
          ///   1. `[]` lending_market_authority
          ///   2. `[]` lending_market
                ///   3. `[writable]` reserve
          ///   4. `[]` reserve_liquidity_mint
                ///   5. `[writable]` reserve_source_liquidity
                ///   6. `[writable]` user_destination_liquidity
                ///   7. `[writable]` reserve_liquidity_fee_receiver
                      ///   8. `[writable, optional]` referrer_token_state
                      ///   9. `[writable, optional]` referrer_account
          ///   10. `[]` sysvar_info
          ///   11. `[]` token_program
#[derive(Clone, Debug, Default)]
pub struct FlashBorrowReserveLiquidityBuilder {
            user_transfer_authority: Option<solana_pubkey::Pubkey>,
                lending_market_authority: Option<solana_pubkey::Pubkey>,
                lending_market: Option<solana_pubkey::Pubkey>,
                reserve: Option<solana_pubkey::Pubkey>,
                reserve_liquidity_mint: Option<solana_pubkey::Pubkey>,
                reserve_source_liquidity: Option<solana_pubkey::Pubkey>,
                user_destination_liquidity: Option<solana_pubkey::Pubkey>,
                reserve_liquidity_fee_receiver: Option<solana_pubkey::Pubkey>,
                referrer_token_state: Option<solana_pubkey::Pubkey>,
                referrer_account: Option<solana_pubkey::Pubkey>,
                sysvar_info: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                        liquidity_amount: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl FlashBorrowReserveLiquidityBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn user_transfer_authority(&mut self, user_transfer_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_transfer_authority = Some(user_transfer_authority);
                    self
    }
            #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market_authority = Some(lending_market_authority);
                    self
    }
            #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
            #[inline(always)]
    pub fn reserve_liquidity_mint(&mut self, reserve_liquidity_mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve_liquidity_mint = Some(reserve_liquidity_mint);
                    self
    }
            #[inline(always)]
    pub fn reserve_source_liquidity(&mut self, reserve_source_liquidity: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve_source_liquidity = Some(reserve_source_liquidity);
                    self
    }
            #[inline(always)]
    pub fn user_destination_liquidity(&mut self, user_destination_liquidity: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_destination_liquidity = Some(user_destination_liquidity);
                    self
    }
            #[inline(always)]
    pub fn reserve_liquidity_fee_receiver(&mut self, reserve_liquidity_fee_receiver: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve_liquidity_fee_receiver = Some(reserve_liquidity_fee_receiver);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn referrer_token_state(&mut self, referrer_token_state: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.referrer_token_state = referrer_token_state;
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn referrer_account(&mut self, referrer_account: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.referrer_account = referrer_account;
                    self
    }
            #[inline(always)]
    pub fn sysvar_info(&mut self, sysvar_info: solana_pubkey::Pubkey) -> &mut Self {
                        self.sysvar_info = Some(sysvar_info);
                    self
    }
            #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn liquidity_amount(&mut self, liquidity_amount: u64) -> &mut Self {
        self.liquidity_amount = Some(liquidity_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = FlashBorrowReserveLiquidity {
                              user_transfer_authority: self.user_transfer_authority.expect("user_transfer_authority is not set"),
                                        lending_market_authority: self.lending_market_authority.expect("lending_market_authority is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        reserve: self.reserve.expect("reserve is not set"),
                                        reserve_liquidity_mint: self.reserve_liquidity_mint.expect("reserve_liquidity_mint is not set"),
                                        reserve_source_liquidity: self.reserve_source_liquidity.expect("reserve_source_liquidity is not set"),
                                        user_destination_liquidity: self.user_destination_liquidity.expect("user_destination_liquidity is not set"),
                                        reserve_liquidity_fee_receiver: self.reserve_liquidity_fee_receiver.expect("reserve_liquidity_fee_receiver is not set"),
                                        referrer_token_state: self.referrer_token_state,
                                        referrer_account: self.referrer_account,
                                        sysvar_info: self.sysvar_info.expect("sysvar_info is not set"),
                                        token_program: self.token_program.expect("token_program is not set"),
                      };
          let args = FlashBorrowReserveLiquidityInstructionArgs {
                                                              liquidity_amount: self.liquidity_amount.clone().expect("liquidity_amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `flash_borrow_reserve_liquidity` CPI accounts.
  pub struct FlashBorrowReserveLiquidityCpiAccounts<'a, 'b> {
          
                    
              pub user_transfer_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve_liquidity_mint: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve_source_liquidity: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub user_destination_liquidity: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve_liquidity_fee_receiver: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub referrer_token_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub referrer_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub sysvar_info: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `flash_borrow_reserve_liquidity` CPI instruction.
pub struct FlashBorrowReserveLiquidityCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub user_transfer_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve_liquidity_mint: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve_source_liquidity: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub user_destination_liquidity: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve_liquidity_fee_receiver: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub referrer_token_state: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub referrer_account: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub sysvar_info: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: FlashBorrowReserveLiquidityInstructionArgs,
  }

impl<'a, 'b> FlashBorrowReserveLiquidityCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: FlashBorrowReserveLiquidityCpiAccounts<'a, 'b>,
              args: FlashBorrowReserveLiquidityInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              user_transfer_authority: accounts.user_transfer_authority,
              lending_market_authority: accounts.lending_market_authority,
              lending_market: accounts.lending_market,
              reserve: accounts.reserve,
              reserve_liquidity_mint: accounts.reserve_liquidity_mint,
              reserve_source_liquidity: accounts.reserve_source_liquidity,
              user_destination_liquidity: accounts.user_destination_liquidity,
              reserve_liquidity_fee_receiver: accounts.reserve_liquidity_fee_receiver,
              referrer_token_state: accounts.referrer_token_state,
              referrer_account: accounts.referrer_account,
              sysvar_info: accounts.sysvar_info,
              token_program: accounts.token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(12+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.user_transfer_authority.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.reserve_liquidity_mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve_source_liquidity.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.user_destination_liquidity.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve_liquidity_fee_receiver.key,
            false
          ));
                                          if let Some(referrer_token_state) = self.referrer_token_state {
            accounts.push(solana_instruction::AccountMeta::new(
              *referrer_token_state.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          if let Some(referrer_account) = self.referrer_account {
            accounts.push(solana_instruction::AccountMeta::new(
              *referrer_account.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.sysvar_info.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&FlashBorrowReserveLiquidityInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.user_transfer_authority.clone());
                        account_infos.push(self.lending_market_authority.clone());
                        account_infos.push(self.lending_market.clone());
                        account_infos.push(self.reserve.clone());
                        account_infos.push(self.reserve_liquidity_mint.clone());
                        account_infos.push(self.reserve_source_liquidity.clone());
                        account_infos.push(self.user_destination_liquidity.clone());
                        account_infos.push(self.reserve_liquidity_fee_receiver.clone());
                        if let Some(referrer_token_state) = self.referrer_token_state {
          account_infos.push(referrer_token_state.clone());
        }
                        if let Some(referrer_account) = self.referrer_account {
          account_infos.push(referrer_account.clone());
        }
                        account_infos.push(self.sysvar_info.clone());
                        account_infos.push(self.token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `FlashBorrowReserveLiquidity` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` user_transfer_authority
          ///   1. `[]` lending_market_authority
          ///   2. `[]` lending_market
                ///   3. `[writable]` reserve
          ///   4. `[]` reserve_liquidity_mint
                ///   5. `[writable]` reserve_source_liquidity
                ///   6. `[writable]` user_destination_liquidity
                ///   7. `[writable]` reserve_liquidity_fee_receiver
                      ///   8. `[writable, optional]` referrer_token_state
                      ///   9. `[writable, optional]` referrer_account
          ///   10. `[]` sysvar_info
          ///   11. `[]` token_program
#[derive(Clone, Debug)]
pub struct FlashBorrowReserveLiquidityCpiBuilder<'a, 'b> {
  instruction: Box<FlashBorrowReserveLiquidityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> FlashBorrowReserveLiquidityCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(FlashBorrowReserveLiquidityCpiBuilderInstruction {
      __program: program,
              user_transfer_authority: None,
              lending_market_authority: None,
              lending_market: None,
              reserve: None,
              reserve_liquidity_mint: None,
              reserve_source_liquidity: None,
              user_destination_liquidity: None,
              reserve_liquidity_fee_receiver: None,
              referrer_token_state: None,
              referrer_account: None,
              sysvar_info: None,
              token_program: None,
                                            liquidity_amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn user_transfer_authority(&mut self, user_transfer_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_transfer_authority = Some(user_transfer_authority);
                    self
    }
      #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market_authority = Some(lending_market_authority);
                    self
    }
      #[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
      #[inline(always)]
    pub fn reserve_liquidity_mint(&mut self, reserve_liquidity_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_liquidity_mint = Some(reserve_liquidity_mint);
                    self
    }
      #[inline(always)]
    pub fn reserve_source_liquidity(&mut self, reserve_source_liquidity: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_source_liquidity = Some(reserve_source_liquidity);
                    self
    }
      #[inline(always)]
    pub fn user_destination_liquidity(&mut self, user_destination_liquidity: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_destination_liquidity = Some(user_destination_liquidity);
                    self
    }
      #[inline(always)]
    pub fn reserve_liquidity_fee_receiver(&mut self, reserve_liquidity_fee_receiver: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve_liquidity_fee_receiver = Some(reserve_liquidity_fee_receiver);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn referrer_token_state(&mut self, referrer_token_state: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.referrer_token_state = referrer_token_state;
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn referrer_account(&mut self, referrer_account: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.referrer_account = referrer_account;
                    self
    }
      #[inline(always)]
    pub fn sysvar_info(&mut self, sysvar_info: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.sysvar_info = Some(sysvar_info);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn liquidity_amount(&mut self, liquidity_amount: u64) -> &mut Self {
        self.instruction.liquidity_amount = Some(liquidity_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = FlashBorrowReserveLiquidityInstructionArgs {
                                                              liquidity_amount: self.instruction.liquidity_amount.clone().expect("liquidity_amount is not set"),
                                    };
        let instruction = FlashBorrowReserveLiquidityCpi {
        __program: self.instruction.__program,
                  
          user_transfer_authority: self.instruction.user_transfer_authority.expect("user_transfer_authority is not set"),
                  
          lending_market_authority: self.instruction.lending_market_authority.expect("lending_market_authority is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                  
          reserve_liquidity_mint: self.instruction.reserve_liquidity_mint.expect("reserve_liquidity_mint is not set"),
                  
          reserve_source_liquidity: self.instruction.reserve_source_liquidity.expect("reserve_source_liquidity is not set"),
                  
          user_destination_liquidity: self.instruction.user_destination_liquidity.expect("user_destination_liquidity is not set"),
                  
          reserve_liquidity_fee_receiver: self.instruction.reserve_liquidity_fee_receiver.expect("reserve_liquidity_fee_receiver is not set"),
                  
          referrer_token_state: self.instruction.referrer_token_state,
                  
          referrer_account: self.instruction.referrer_account,
                  
          sysvar_info: self.instruction.sysvar_info.expect("sysvar_info is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct FlashBorrowReserveLiquidityCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            user_transfer_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_liquidity_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_source_liquidity: Option<&'b solana_account_info::AccountInfo<'a>>,
                user_destination_liquidity: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_liquidity_fee_receiver: Option<&'b solana_account_info::AccountInfo<'a>>,
                referrer_token_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                referrer_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                sysvar_info: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        liquidity_amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

