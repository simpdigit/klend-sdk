//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const DELETE_REFERRER_STATE_AND_SHORT_URL_DISCRIMINATOR: [u8; 8] = [153, 185, 99, 28, 228, 179, 187, 150];

/// Accounts.
#[derive(Debug)]
pub struct DeleteReferrerStateAndShortUrl {
      
              
          pub referrer: solana_pubkey::Pubkey,
          
              
          pub referrer_state: solana_pubkey::Pubkey,
          
              
          pub short_url: solana_pubkey::Pubkey,
          
              
          pub rent: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl DeleteReferrerStateAndShortUrl {
  pub fn instruction(&self) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.referrer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.referrer_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.short_url,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&DeleteReferrerStateAndShortUrlInstructionData::new()).unwrap();
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DeleteReferrerStateAndShortUrlInstructionData {
            discriminator: [u8; 8],
      }

impl DeleteReferrerStateAndShortUrlInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [153, 185, 99, 28, 228, 179, 187, 150],
                  }
  }
}

impl Default for DeleteReferrerStateAndShortUrlInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `DeleteReferrerStateAndShortUrl`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` referrer
                ///   1. `[writable]` referrer_state
                ///   2. `[writable]` short_url
          ///   3. `[]` rent
          ///   4. `[]` system_program
#[derive(Clone, Debug, Default)]
pub struct DeleteReferrerStateAndShortUrlBuilder {
            referrer: Option<solana_pubkey::Pubkey>,
                referrer_state: Option<solana_pubkey::Pubkey>,
                short_url: Option<solana_pubkey::Pubkey>,
                rent: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl DeleteReferrerStateAndShortUrlBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn referrer(&mut self, referrer: solana_pubkey::Pubkey) -> &mut Self {
                        self.referrer = Some(referrer);
                    self
    }
            #[inline(always)]
    pub fn referrer_state(&mut self, referrer_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.referrer_state = Some(referrer_state);
                    self
    }
            #[inline(always)]
    pub fn short_url(&mut self, short_url: solana_pubkey::Pubkey) -> &mut Self {
                        self.short_url = Some(short_url);
                    self
    }
            #[inline(always)]
    pub fn rent(&mut self, rent: solana_pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = DeleteReferrerStateAndShortUrl {
                              referrer: self.referrer.expect("referrer is not set"),
                                        referrer_state: self.referrer_state.expect("referrer_state is not set"),
                                        short_url: self.short_url.expect("short_url is not set"),
                                        rent: self.rent.expect("rent is not set"),
                                        system_program: self.system_program.expect("system_program is not set"),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `delete_referrer_state_and_short_url` CPI accounts.
  pub struct DeleteReferrerStateAndShortUrlCpiAccounts<'a, 'b> {
          
                    
              pub referrer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub referrer_state: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub short_url: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `delete_referrer_state_and_short_url` CPI instruction.
pub struct DeleteReferrerStateAndShortUrlCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub referrer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub referrer_state: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub short_url: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
        }

impl<'a, 'b> DeleteReferrerStateAndShortUrlCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: DeleteReferrerStateAndShortUrlCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              referrer: accounts.referrer,
              referrer_state: accounts.referrer_state,
              short_url: accounts.short_url,
              rent: accounts.rent,
              system_program: accounts.system_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.referrer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.referrer_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.short_url.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&DeleteReferrerStateAndShortUrlInstructionData::new()).unwrap();
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.referrer.clone());
                        account_infos.push(self.referrer_state.clone());
                        account_infos.push(self.short_url.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `DeleteReferrerStateAndShortUrl` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` referrer
                ///   1. `[writable]` referrer_state
                ///   2. `[writable]` short_url
          ///   3. `[]` rent
          ///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct DeleteReferrerStateAndShortUrlCpiBuilder<'a, 'b> {
  instruction: Box<DeleteReferrerStateAndShortUrlCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DeleteReferrerStateAndShortUrlCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DeleteReferrerStateAndShortUrlCpiBuilderInstruction {
      __program: program,
              referrer: None,
              referrer_state: None,
              short_url: None,
              rent: None,
              system_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn referrer(&mut self, referrer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.referrer = Some(referrer);
                    self
    }
      #[inline(always)]
    pub fn referrer_state(&mut self, referrer_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.referrer_state = Some(referrer_state);
                    self
    }
      #[inline(always)]
    pub fn short_url(&mut self, short_url: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.short_url = Some(short_url);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = DeleteReferrerStateAndShortUrlCpi {
        __program: self.instruction.__program,
                  
          referrer: self.instruction.referrer.expect("referrer is not set"),
                  
          referrer_state: self.instruction.referrer_state.expect("referrer_state is not set"),
                  
          short_url: self.instruction.short_url.expect("short_url is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DeleteReferrerStateAndShortUrlCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            referrer: Option<&'b solana_account_info::AccountInfo<'a>>,
                referrer_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                short_url: Option<&'b solana_account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

