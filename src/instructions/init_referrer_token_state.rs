//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const INIT_REFERRER_TOKEN_STATE_DISCRIMINATOR: [u8; 8] = [116, 45, 66, 148, 58, 13, 218, 115];

/// Accounts.
#[derive(Debug)]
pub struct InitReferrerTokenState {
      
              
          pub payer: solana_pubkey::Pubkey,
          
              
          pub lending_market: solana_pubkey::Pubkey,
          
              
          pub reserve: solana_pubkey::Pubkey,
          
              
          pub referrer: solana_pubkey::Pubkey,
          
              
          pub referrer_token_state: solana_pubkey::Pubkey,
          
              
          pub rent: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl InitReferrerTokenState {
  pub fn instruction(&self) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.reserve,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.referrer,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.referrer_token_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&InitReferrerTokenStateInstructionData::new()).unwrap();
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitReferrerTokenStateInstructionData {
            discriminator: [u8; 8],
      }

impl InitReferrerTokenStateInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [116, 45, 66, 148, 58, 13, 218, 115],
                  }
  }
}

impl Default for InitReferrerTokenStateInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `InitReferrerTokenState`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
          ///   1. `[]` lending_market
          ///   2. `[]` reserve
          ///   3. `[]` referrer
                ///   4. `[writable]` referrer_token_state
          ///   5. `[]` rent
          ///   6. `[]` system_program
#[derive(Clone, Debug, Default)]
pub struct InitReferrerTokenStateBuilder {
            payer: Option<solana_pubkey::Pubkey>,
                lending_market: Option<solana_pubkey::Pubkey>,
                reserve: Option<solana_pubkey::Pubkey>,
                referrer: Option<solana_pubkey::Pubkey>,
                referrer_token_state: Option<solana_pubkey::Pubkey>,
                rent: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitReferrerTokenStateBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
            #[inline(always)]
    pub fn referrer(&mut self, referrer: solana_pubkey::Pubkey) -> &mut Self {
                        self.referrer = Some(referrer);
                    self
    }
            #[inline(always)]
    pub fn referrer_token_state(&mut self, referrer_token_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.referrer_token_state = Some(referrer_token_state);
                    self
    }
            #[inline(always)]
    pub fn rent(&mut self, rent: solana_pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = InitReferrerTokenState {
                              payer: self.payer.expect("payer is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        reserve: self.reserve.expect("reserve is not set"),
                                        referrer: self.referrer.expect("referrer is not set"),
                                        referrer_token_state: self.referrer_token_state.expect("referrer_token_state is not set"),
                                        rent: self.rent.expect("rent is not set"),
                                        system_program: self.system_program.expect("system_program is not set"),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `init_referrer_token_state` CPI accounts.
  pub struct InitReferrerTokenStateCpiAccounts<'a, 'b> {
          
                    
              pub payer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub referrer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub referrer_token_state: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `init_referrer_token_state` CPI instruction.
pub struct InitReferrerTokenStateCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub payer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub referrer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub referrer_token_state: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
        }

impl<'a, 'b> InitReferrerTokenStateCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: InitReferrerTokenStateCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              payer: accounts.payer,
              lending_market: accounts.lending_market,
              reserve: accounts.reserve,
              referrer: accounts.referrer,
              referrer_token_state: accounts.referrer_token_state,
              rent: accounts.rent,
              system_program: accounts.system_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.reserve.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.referrer.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.referrer_token_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&InitReferrerTokenStateInstructionData::new()).unwrap();
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.payer.clone());
                        account_infos.push(self.lending_market.clone());
                        account_infos.push(self.reserve.clone());
                        account_infos.push(self.referrer.clone());
                        account_infos.push(self.referrer_token_state.clone());
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitReferrerTokenState` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` payer
          ///   1. `[]` lending_market
          ///   2. `[]` reserve
          ///   3. `[]` referrer
                ///   4. `[writable]` referrer_token_state
          ///   5. `[]` rent
          ///   6. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitReferrerTokenStateCpiBuilder<'a, 'b> {
  instruction: Box<InitReferrerTokenStateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitReferrerTokenStateCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitReferrerTokenStateCpiBuilderInstruction {
      __program: program,
              payer: None,
              lending_market: None,
              reserve: None,
              referrer: None,
              referrer_token_state: None,
              rent: None,
              system_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      #[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
      #[inline(always)]
    pub fn referrer(&mut self, referrer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.referrer = Some(referrer);
                    self
    }
      #[inline(always)]
    pub fn referrer_token_state(&mut self, referrer_token_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.referrer_token_state = Some(referrer_token_state);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = InitReferrerTokenStateCpi {
        __program: self.instruction.__program,
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                  
          referrer: self.instruction.referrer.expect("referrer is not set"),
                  
          referrer_token_state: self.instruction.referrer_token_state.expect("referrer_token_state is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitReferrerTokenStateCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            payer: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
                referrer: Option<&'b solana_account_info::AccountInfo<'a>>,
                referrer_token_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

