//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const SOCIALIZE_LOSS_V2_DISCRIMINATOR: [u8; 8] = [238, 95, 98, 220, 187, 40, 204, 154];

/// Accounts.
#[derive(Debug)]
pub struct SocializeLossV2 {
      
              
          pub risk_council: solana_pubkey::Pubkey,
          
              
          pub obligation: solana_pubkey::Pubkey,
          
              
          pub lending_market: solana_pubkey::Pubkey,
          
              
          pub reserve: solana_pubkey::Pubkey,
          
              
          pub instruction_sysvar_account: solana_pubkey::Pubkey,
          
              
          pub obligation_farm_user_state: Option<solana_pubkey::Pubkey>,
          
              
          pub reserve_farm_state: Option<solana_pubkey::Pubkey>,
          
              
          pub lending_market_authority: solana_pubkey::Pubkey,
          
              
          pub farms_program: solana_pubkey::Pubkey,
      }

impl SocializeLossV2 {
  pub fn instruction(&self, args: SocializeLossV2InstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: SocializeLossV2InstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.risk_council,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.obligation,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.reserve,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction_sysvar_account,
            false
          ));
                                                      if let Some(obligation_farm_user_state) = self.obligation_farm_user_state {
              accounts.push(solana_instruction::AccountMeta::new(
                obligation_farm_user_state,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                                if let Some(reserve_farm_state) = self.reserve_farm_state {
              accounts.push(solana_instruction::AccountMeta::new(
                reserve_farm_state,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                    accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lending_market_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.farms_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&SocializeLossV2InstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SocializeLossV2InstructionData {
            discriminator: [u8; 8],
            }

impl SocializeLossV2InstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [238, 95, 98, 220, 187, 40, 204, 154],
                                }
  }
}

impl Default for SocializeLossV2InstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SocializeLossV2InstructionArgs {
                  pub liquidity_amount: u64,
      }


/// Instruction builder for `SocializeLossV2`.
///
/// ### Accounts:
///
                ///   0. `[signer]` risk_council
                ///   1. `[writable]` obligation
          ///   2. `[]` lending_market
                ///   3. `[writable]` reserve
          ///   4. `[]` instruction_sysvar_account
                      ///   5. `[writable, optional]` obligation_farm_user_state
                      ///   6. `[writable, optional]` reserve_farm_state
          ///   7. `[]` lending_market_authority
          ///   8. `[]` farms_program
#[derive(Clone, Debug, Default)]
pub struct SocializeLossV2Builder {
            risk_council: Option<solana_pubkey::Pubkey>,
                obligation: Option<solana_pubkey::Pubkey>,
                lending_market: Option<solana_pubkey::Pubkey>,
                reserve: Option<solana_pubkey::Pubkey>,
                instruction_sysvar_account: Option<solana_pubkey::Pubkey>,
                obligation_farm_user_state: Option<solana_pubkey::Pubkey>,
                reserve_farm_state: Option<solana_pubkey::Pubkey>,
                lending_market_authority: Option<solana_pubkey::Pubkey>,
                farms_program: Option<solana_pubkey::Pubkey>,
                        liquidity_amount: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl SocializeLossV2Builder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn risk_council(&mut self, risk_council: solana_pubkey::Pubkey) -> &mut Self {
                        self.risk_council = Some(risk_council);
                    self
    }
            #[inline(always)]
    pub fn obligation(&mut self, obligation: solana_pubkey::Pubkey) -> &mut Self {
                        self.obligation = Some(obligation);
                    self
    }
            #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market = Some(lending_market);
                    self
    }
            #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_pubkey::Pubkey) -> &mut Self {
                        self.reserve = Some(reserve);
                    self
    }
            #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn obligation_farm_user_state(&mut self, obligation_farm_user_state: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.obligation_farm_user_state = obligation_farm_user_state;
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn reserve_farm_state(&mut self, reserve_farm_state: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.reserve_farm_state = reserve_farm_state;
                    self
    }
            #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.lending_market_authority = Some(lending_market_authority);
                    self
    }
            #[inline(always)]
    pub fn farms_program(&mut self, farms_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.farms_program = Some(farms_program);
                    self
    }
                    #[inline(always)]
      pub fn liquidity_amount(&mut self, liquidity_amount: u64) -> &mut Self {
        self.liquidity_amount = Some(liquidity_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = SocializeLossV2 {
                              risk_council: self.risk_council.expect("risk_council is not set"),
                                        obligation: self.obligation.expect("obligation is not set"),
                                        lending_market: self.lending_market.expect("lending_market is not set"),
                                        reserve: self.reserve.expect("reserve is not set"),
                                        instruction_sysvar_account: self.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                                        obligation_farm_user_state: self.obligation_farm_user_state,
                                        reserve_farm_state: self.reserve_farm_state,
                                        lending_market_authority: self.lending_market_authority.expect("lending_market_authority is not set"),
                                        farms_program: self.farms_program.expect("farms_program is not set"),
                      };
          let args = SocializeLossV2InstructionArgs {
                                                              liquidity_amount: self.liquidity_amount.clone().expect("liquidity_amount is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `socialize_loss_v2` CPI accounts.
  pub struct SocializeLossV2CpiAccounts<'a, 'b> {
          
                    
              pub risk_council: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub obligation: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub lending_market: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub reserve: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub obligation_farm_user_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub reserve_farm_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub lending_market_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub farms_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `socialize_loss_v2` CPI instruction.
pub struct SocializeLossV2Cpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub risk_council: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub obligation: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub lending_market: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub reserve: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub obligation_farm_user_state: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub reserve_farm_state: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub lending_market_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub farms_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: SocializeLossV2InstructionArgs,
  }

impl<'a, 'b> SocializeLossV2Cpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: SocializeLossV2CpiAccounts<'a, 'b>,
              args: SocializeLossV2InstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              risk_council: accounts.risk_council,
              obligation: accounts.obligation,
              lending_market: accounts.lending_market,
              reserve: accounts.reserve,
              instruction_sysvar_account: accounts.instruction_sysvar_account,
              obligation_farm_user_state: accounts.obligation_farm_user_state,
              reserve_farm_state: accounts.reserve_farm_state,
              lending_market_authority: accounts.lending_market_authority,
              farms_program: accounts.farms_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(9+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.risk_council.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.obligation.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar_account.key,
            false
          ));
                                          if let Some(obligation_farm_user_state) = self.obligation_farm_user_state {
            accounts.push(solana_instruction::AccountMeta::new(
              *obligation_farm_user_state.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          if let Some(reserve_farm_state) = self.reserve_farm_state {
            accounts.push(solana_instruction::AccountMeta::new(
              *reserve_farm_state.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lending_market_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.farms_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&SocializeLossV2InstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.risk_council.clone());
                        account_infos.push(self.obligation.clone());
                        account_infos.push(self.lending_market.clone());
                        account_infos.push(self.reserve.clone());
                        account_infos.push(self.instruction_sysvar_account.clone());
                        if let Some(obligation_farm_user_state) = self.obligation_farm_user_state {
          account_infos.push(obligation_farm_user_state.clone());
        }
                        if let Some(reserve_farm_state) = self.reserve_farm_state {
          account_infos.push(reserve_farm_state.clone());
        }
                        account_infos.push(self.lending_market_authority.clone());
                        account_infos.push(self.farms_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `SocializeLossV2` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` risk_council
                ///   1. `[writable]` obligation
          ///   2. `[]` lending_market
                ///   3. `[writable]` reserve
          ///   4. `[]` instruction_sysvar_account
                      ///   5. `[writable, optional]` obligation_farm_user_state
                      ///   6. `[writable, optional]` reserve_farm_state
          ///   7. `[]` lending_market_authority
          ///   8. `[]` farms_program
#[derive(Clone, Debug)]
pub struct SocializeLossV2CpiBuilder<'a, 'b> {
  instruction: Box<SocializeLossV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SocializeLossV2CpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(SocializeLossV2CpiBuilderInstruction {
      __program: program,
              risk_council: None,
              obligation: None,
              lending_market: None,
              reserve: None,
              instruction_sysvar_account: None,
              obligation_farm_user_state: None,
              reserve_farm_state: None,
              lending_market_authority: None,
              farms_program: None,
                                            liquidity_amount: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn risk_council(&mut self, risk_council: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.risk_council = Some(risk_council);
                    self
    }
      #[inline(always)]
    pub fn obligation(&mut self, obligation: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.obligation = Some(obligation);
                    self
    }
      #[inline(always)]
    pub fn lending_market(&mut self, lending_market: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market = Some(lending_market);
                    self
    }
      #[inline(always)]
    pub fn reserve(&mut self, reserve: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.reserve = Some(reserve);
                    self
    }
      #[inline(always)]
    pub fn instruction_sysvar_account(&mut self, instruction_sysvar_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar_account = Some(instruction_sysvar_account);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn obligation_farm_user_state(&mut self, obligation_farm_user_state: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.obligation_farm_user_state = obligation_farm_user_state;
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn reserve_farm_state(&mut self, reserve_farm_state: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.reserve_farm_state = reserve_farm_state;
                    self
    }
      #[inline(always)]
    pub fn lending_market_authority(&mut self, lending_market_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lending_market_authority = Some(lending_market_authority);
                    self
    }
      #[inline(always)]
    pub fn farms_program(&mut self, farms_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.farms_program = Some(farms_program);
                    self
    }
                    #[inline(always)]
      pub fn liquidity_amount(&mut self, liquidity_amount: u64) -> &mut Self {
        self.instruction.liquidity_amount = Some(liquidity_amount);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = SocializeLossV2InstructionArgs {
                                                              liquidity_amount: self.instruction.liquidity_amount.clone().expect("liquidity_amount is not set"),
                                    };
        let instruction = SocializeLossV2Cpi {
        __program: self.instruction.__program,
                  
          risk_council: self.instruction.risk_council.expect("risk_council is not set"),
                  
          obligation: self.instruction.obligation.expect("obligation is not set"),
                  
          lending_market: self.instruction.lending_market.expect("lending_market is not set"),
                  
          reserve: self.instruction.reserve.expect("reserve is not set"),
                  
          instruction_sysvar_account: self.instruction.instruction_sysvar_account.expect("instruction_sysvar_account is not set"),
                  
          obligation_farm_user_state: self.instruction.obligation_farm_user_state,
                  
          reserve_farm_state: self.instruction.reserve_farm_state,
                  
          lending_market_authority: self.instruction.lending_market_authority.expect("lending_market_authority is not set"),
                  
          farms_program: self.instruction.farms_program.expect("farms_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct SocializeLossV2CpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            risk_council: Option<&'b solana_account_info::AccountInfo<'a>>,
                obligation: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve: Option<&'b solana_account_info::AccountInfo<'a>>,
                instruction_sysvar_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                obligation_farm_user_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                reserve_farm_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                lending_market_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                farms_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        liquidity_amount: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

