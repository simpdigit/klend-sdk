//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const INIT_USER_METADATA_DISCRIMINATOR: [u8; 8] = [117, 169, 176, 69, 197, 23, 15, 162];

/// Accounts.
#[derive(Debug)]
pub struct InitUserMetadata {
      
              
          pub owner: solana_pubkey::Pubkey,
          
              
          pub fee_payer: solana_pubkey::Pubkey,
          
              
          pub user_metadata: solana_pubkey::Pubkey,
          
              
          pub referrer_user_metadata: Option<solana_pubkey::Pubkey>,
          
              
          pub rent: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl InitUserMetadata {
  pub fn instruction(&self, args: InitUserMetadataInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitUserMetadataInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.fee_payer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.user_metadata,
            false
          ));
                                                      if let Some(referrer_user_metadata) = self.referrer_user_metadata {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                referrer_user_metadata,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::KAMINO_LENDING_ID,
                false,
              ));
            }
                                                    accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitUserMetadataInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitUserMetadataInstructionData {
            discriminator: [u8; 8],
            }

impl InitUserMetadataInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [117, 169, 176, 69, 197, 23, 15, 162],
                                }
  }
}

impl Default for InitUserMetadataInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitUserMetadataInstructionArgs {
                  pub user_lookup_table: Pubkey,
      }


/// Instruction builder for `InitUserMetadata`.
///
/// ### Accounts:
///
                ///   0. `[signer]` owner
                      ///   1. `[writable, signer]` fee_payer
                ///   2. `[writable]` user_metadata
                ///   3. `[optional]` referrer_user_metadata
          ///   4. `[]` rent
          ///   5. `[]` system_program
#[derive(Clone, Debug, Default)]
pub struct InitUserMetadataBuilder {
            owner: Option<solana_pubkey::Pubkey>,
                fee_payer: Option<solana_pubkey::Pubkey>,
                user_metadata: Option<solana_pubkey::Pubkey>,
                referrer_user_metadata: Option<solana_pubkey::Pubkey>,
                rent: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        user_lookup_table: Option<Pubkey>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitUserMetadataBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
                        self.owner = Some(owner);
                    self
    }
            #[inline(always)]
    pub fn fee_payer(&mut self, fee_payer: solana_pubkey::Pubkey) -> &mut Self {
                        self.fee_payer = Some(fee_payer);
                    self
    }
            #[inline(always)]
    pub fn user_metadata(&mut self, user_metadata: solana_pubkey::Pubkey) -> &mut Self {
                        self.user_metadata = Some(user_metadata);
                    self
    }
            /// `[optional account]`
#[inline(always)]
    pub fn referrer_user_metadata(&mut self, referrer_user_metadata: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.referrer_user_metadata = referrer_user_metadata;
                    self
    }
            #[inline(always)]
    pub fn rent(&mut self, rent: solana_pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
            #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn user_lookup_table(&mut self, user_lookup_table: Pubkey) -> &mut Self {
        self.user_lookup_table = Some(user_lookup_table);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = InitUserMetadata {
                              owner: self.owner.expect("owner is not set"),
                                        fee_payer: self.fee_payer.expect("fee_payer is not set"),
                                        user_metadata: self.user_metadata.expect("user_metadata is not set"),
                                        referrer_user_metadata: self.referrer_user_metadata,
                                        rent: self.rent.expect("rent is not set"),
                                        system_program: self.system_program.expect("system_program is not set"),
                      };
          let args = InitUserMetadataInstructionArgs {
                                                              user_lookup_table: self.user_lookup_table.clone().expect("user_lookup_table is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `init_user_metadata` CPI accounts.
  pub struct InitUserMetadataCpiAccounts<'a, 'b> {
          
                    
              pub owner: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub fee_payer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub user_metadata: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub referrer_user_metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub rent: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `init_user_metadata` CPI instruction.
pub struct InitUserMetadataCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub owner: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub fee_payer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub user_metadata: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub referrer_user_metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub rent: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitUserMetadataInstructionArgs,
  }

impl<'a, 'b> InitUserMetadataCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: InitUserMetadataCpiAccounts<'a, 'b>,
              args: InitUserMetadataInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              owner: accounts.owner,
              fee_payer: accounts.fee_payer,
              user_metadata: accounts.user_metadata,
              referrer_user_metadata: accounts.referrer_user_metadata,
              rent: accounts.rent,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.fee_payer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.user_metadata.key,
            false
          ));
                                          if let Some(referrer_user_metadata) = self.referrer_user_metadata {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *referrer_user_metadata.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::KAMINO_LENDING_ID,
              false,
            ));
          }
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitUserMetadataInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::KAMINO_LENDING_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.owner.clone());
                        account_infos.push(self.fee_payer.clone());
                        account_infos.push(self.user_metadata.clone());
                        if let Some(referrer_user_metadata) = self.referrer_user_metadata {
          account_infos.push(referrer_user_metadata.clone());
        }
                        account_infos.push(self.rent.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitUserMetadata` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` owner
                      ///   1. `[writable, signer]` fee_payer
                ///   2. `[writable]` user_metadata
                ///   3. `[optional]` referrer_user_metadata
          ///   4. `[]` rent
          ///   5. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitUserMetadataCpiBuilder<'a, 'b> {
  instruction: Box<InitUserMetadataCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitUserMetadataCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitUserMetadataCpiBuilderInstruction {
      __program: program,
              owner: None,
              fee_payer: None,
              user_metadata: None,
              referrer_user_metadata: None,
              rent: None,
              system_program: None,
                                            user_lookup_table: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.owner = Some(owner);
                    self
    }
      #[inline(always)]
    pub fn fee_payer(&mut self, fee_payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fee_payer = Some(fee_payer);
                    self
    }
      #[inline(always)]
    pub fn user_metadata(&mut self, user_metadata: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.user_metadata = Some(user_metadata);
                    self
    }
      /// `[optional account]`
#[inline(always)]
    pub fn referrer_user_metadata(&mut self, referrer_user_metadata: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.referrer_user_metadata = referrer_user_metadata;
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn user_lookup_table(&mut self, user_lookup_table: Pubkey) -> &mut Self {
        self.instruction.user_lookup_table = Some(user_lookup_table);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = InitUserMetadataInstructionArgs {
                                                              user_lookup_table: self.instruction.user_lookup_table.clone().expect("user_lookup_table is not set"),
                                    };
        let instruction = InitUserMetadataCpi {
        __program: self.instruction.__program,
                  
          owner: self.instruction.owner.expect("owner is not set"),
                  
          fee_payer: self.instruction.fee_payer.expect("fee_payer is not set"),
                  
          user_metadata: self.instruction.user_metadata.expect("user_metadata is not set"),
                  
          referrer_user_metadata: self.instruction.referrer_user_metadata,
                  
          rent: self.instruction.rent.expect("rent is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitUserMetadataCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            owner: Option<&'b solana_account_info::AccountInfo<'a>>,
                fee_payer: Option<&'b solana_account_info::AccountInfo<'a>>,
                user_metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
                referrer_user_metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        user_lookup_table: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

