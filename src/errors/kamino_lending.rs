//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum KaminoLendingError {
    /// 6000 - Market authority is invalid
    #[error("Market authority is invalid")]
    InvalidMarketAuthority = 0x1770,
    /// 6001 - Market owner is invalid
    #[error("Market owner is invalid")]
    InvalidMarketOwner = 0x1771,
    /// 6002 - Input account owner is not the program address
    #[error("Input account owner is not the program address")]
    InvalidAccountOwner = 0x1772,
    /// 6003 - Input amount is invalid
    #[error("Input amount is invalid")]
    InvalidAmount = 0x1773,
    /// 6004 - Input config value is invalid
    #[error("Input config value is invalid")]
    InvalidConfig = 0x1774,
    /// 6005 - Input account must be a signer
    #[error("Input account must be a signer")]
    InvalidSigner = 0x1775,
    /// 6006 - Invalid account input
    #[error("Invalid account input")]
    InvalidAccountInput = 0x1776,
    /// 6007 - Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow = 0x1777,
    /// 6008 - Insufficient liquidity available
    #[error("Insufficient liquidity available")]
    InsufficientLiquidity = 0x1778,
    /// 6009 - Reserve state needs to be refreshed
    #[error("Reserve state needs to be refreshed")]
    ReserveStale = 0x1779,
    /// 6010 - Withdraw amount too small
    #[error("Withdraw amount too small")]
    WithdrawTooSmall = 0x177A,
    /// 6011 - Withdraw amount too large
    #[error("Withdraw amount too large")]
    WithdrawTooLarge = 0x177B,
    /// 6012 - Borrow amount too small to receive liquidity after fees
    #[error("Borrow amount too small to receive liquidity after fees")]
    BorrowTooSmall = 0x177C,
    /// 6013 - Borrow amount too large for deposited collateral
    #[error("Borrow amount too large for deposited collateral")]
    BorrowTooLarge = 0x177D,
    /// 6014 - Repay amount too small to transfer liquidity
    #[error("Repay amount too small to transfer liquidity")]
    RepayTooSmall = 0x177E,
    /// 6015 - Liquidation amount too small to receive collateral
    #[error("Liquidation amount too small to receive collateral")]
    LiquidationTooSmall = 0x177F,
    /// 6016 - Cannot liquidate healthy obligations
    #[error("Cannot liquidate healthy obligations")]
    ObligationHealthy = 0x1780,
    /// 6017 - Obligation state needs to be refreshed
    #[error("Obligation state needs to be refreshed")]
    ObligationStale = 0x1781,
    /// 6018 - Obligation reserve limit exceeded
    #[error("Obligation reserve limit exceeded")]
    ObligationReserveLimit = 0x1782,
    /// 6019 - Obligation owner is invalid
    #[error("Obligation owner is invalid")]
    InvalidObligationOwner = 0x1783,
    /// 6020 - Obligation deposits are empty
    #[error("Obligation deposits are empty")]
    ObligationDepositsEmpty = 0x1784,
    /// 6021 - Obligation borrows are empty
    #[error("Obligation borrows are empty")]
    ObligationBorrowsEmpty = 0x1785,
    /// 6022 - Obligation deposits have zero value
    #[error("Obligation deposits have zero value")]
    ObligationDepositsZero = 0x1786,
    /// 6023 - Obligation borrows have zero value
    #[error("Obligation borrows have zero value")]
    ObligationBorrowsZero = 0x1787,
    /// 6024 - Invalid obligation collateral
    #[error("Invalid obligation collateral")]
    InvalidObligationCollateral = 0x1788,
    /// 6025 - Invalid obligation liquidity
    #[error("Invalid obligation liquidity")]
    InvalidObligationLiquidity = 0x1789,
    /// 6026 - Obligation collateral is empty
    #[error("Obligation collateral is empty")]
    ObligationCollateralEmpty = 0x178A,
    /// 6027 - Obligation liquidity is empty
    #[error("Obligation liquidity is empty")]
    ObligationLiquidityEmpty = 0x178B,
    /// 6028 - Interest rate is negative
    #[error("Interest rate is negative")]
    NegativeInterestRate = 0x178C,
    /// 6029 - Input oracle config is invalid
    #[error("Input oracle config is invalid")]
    InvalidOracleConfig = 0x178D,
    /// 6030 - Insufficient protocol fees to claim or no liquidity available
    #[error("Insufficient protocol fees to claim or no liquidity available")]
    InsufficientProtocolFeesToRedeem = 0x178E,
    /// 6031 - No cpi flash borrows allowed
    #[error("No cpi flash borrows allowed")]
    FlashBorrowCpi = 0x178F,
    /// 6032 - No corresponding repay found for flash borrow
    #[error("No corresponding repay found for flash borrow")]
    NoFlashRepayFound = 0x1790,
    /// 6033 - Invalid repay found
    #[error("Invalid repay found")]
    InvalidFlashRepay = 0x1791,
    /// 6034 - No cpi flash repays allowed
    #[error("No cpi flash repays allowed")]
    FlashRepayCpi = 0x1792,
    /// 6035 - Multiple flash borrows not allowed in the same transaction
    #[error("Multiple flash borrows not allowed in the same transaction")]
    MultipleFlashBorrows = 0x1793,
    /// 6036 - Flash loans are disabled for this reserve
    #[error("Flash loans are disabled for this reserve")]
    FlashLoansDisabled = 0x1794,
    /// 6037 - Switchboard error
    #[error("Switchboard error")]
    SwitchboardV2Error = 0x1795,
    /// 6038 - Cannot deserialize the scope price account
    #[error("Cannot deserialize the scope price account")]
    CouldNotDeserializeScope = 0x1796,
    /// 6039 - Price too old
    #[error("Price too old")]
    PriceTooOld = 0x1797,
    /// 6040 - Price too divergent from twap
    #[error("Price too divergent from twap")]
    PriceTooDivergentFromTwap = 0x1798,
    /// 6041 - Invalid twap price
    #[error("Invalid twap price")]
    InvalidTwapPrice = 0x1799,
    /// 6042 - Emergency mode is enabled
    #[error("Emergency mode is enabled")]
    GlobalEmergencyMode = 0x179A,
    /// 6043 - Invalid lending market config
    #[error("Invalid lending market config")]
    InvalidFlag = 0x179B,
    /// 6044 - Price is not valid
    #[error("Price is not valid")]
    PriceNotValid = 0x179C,
    /// 6045 - Price is bigger than allowed by heuristic
    #[error("Price is bigger than allowed by heuristic")]
    PriceIsBiggerThanHeuristic = 0x179D,
    /// 6046 - Price lower than allowed by heuristic
    #[error("Price lower than allowed by heuristic")]
    PriceIsLowerThanHeuristic = 0x179E,
    /// 6047 - Price is zero
    #[error("Price is zero")]
    PriceIsZero = 0x179F,
    /// 6048 - Price confidence too wide
    #[error("Price confidence too wide")]
    PriceConfidenceTooWide = 0x17A0,
    /// 6049 - Conversion between integers failed
    #[error("Conversion between integers failed")]
    IntegerOverflow = 0x17A1,
    /// 6050 - This reserve does not have a farm
    #[error("This reserve does not have a farm")]
    NoFarmForReserve = 0x17A2,
    /// 6051 - Wrong instruction at expected position
    #[error("Wrong instruction at expected position")]
    IncorrectInstructionInPosition = 0x17A3,
    /// 6052 - No price found
    #[error("No price found")]
    NoPriceFound = 0x17A4,
    /// 6053 - Invalid Twap configuration: Twap is enabled but one of the enabled price doesn't have a twap
    #[error("Invalid Twap configuration: Twap is enabled but one of the enabled price doesn't have a twap")]
    InvalidTwapConfig = 0x17A5,
    /// 6054 - Pyth price account does not match configuration
    #[error("Pyth price account does not match configuration")]
    InvalidPythPriceAccount = 0x17A6,
    /// 6055 - Switchboard account(s) do not match configuration
    #[error("Switchboard account(s) do not match configuration")]
    InvalidSwitchboardAccount = 0x17A7,
    /// 6056 - Scope price account does not match configuration
    #[error("Scope price account does not match configuration")]
    InvalidScopePriceAccount = 0x17A8,
    /// 6057 - The obligation has one collateral with an LTV set to 0. Withdraw it before withdrawing other collaterals
    #[error("The obligation has one collateral with an LTV set to 0. Withdraw it before withdrawing other collaterals")]
    ObligationCollateralLtvZero = 0x17A9,
    /// 6058 - Seeds must be default pubkeys for tag 0, and mint addresses for tag 1 or 2
    #[error("Seeds must be default pubkeys for tag 0, and mint addresses for tag 1 or 2")]
    InvalidObligationSeedsValue = 0x17AA,
    /// 6059 - [DEPRECATED] Obligation id must be 0
    #[error("[DEPRECATED] Obligation id must be 0")]
    DeprecatedInvalidObligationId = 0x17AB,
    /// 6060 - Invalid borrow rate curve point
    #[error("Invalid borrow rate curve point")]
    InvalidBorrowRateCurvePoint = 0x17AC,
    /// 6061 - Invalid utilization rate
    #[error("Invalid utilization rate")]
    InvalidUtilizationRate = 0x17AD,
    /// 6062 - Obligation hasn't been fully liquidated and debt cannot be socialized.
    #[error("Obligation hasn't been fully liquidated and debt cannot be socialized.")]
    CannotSocializeObligationWithCollateral = 0x17AE,
    /// 6063 - Obligation has no borrows or deposits.
    #[error("Obligation has no borrows or deposits.")]
    ObligationEmpty = 0x17AF,
    /// 6064 - Withdrawal cap is reached
    #[error("Withdrawal cap is reached")]
    WithdrawalCapReached = 0x17B0,
    /// 6065 - The last interval start timestamp is greater than the current timestamp
    #[error("The last interval start timestamp is greater than the current timestamp")]
    LastTimestampGreaterThanCurrent = 0x17B1,
    /// 6066 - The reward amount is less than the minimum acceptable received liquidity
    #[error("The reward amount is less than the minimum acceptable received liquidity")]
    LiquidationRewardTooSmall = 0x17B2,
    /// 6067 - Isolated Asset Tier Violation
    #[error("Isolated Asset Tier Violation")]
    IsolatedAssetTierViolation = 0x17B3,
    /// 6068 - The obligation's elevation group and the reserve's are not the same
    #[error("The obligation's elevation group and the reserve's are not the same")]
    InconsistentElevationGroup = 0x17B4,
    /// 6069 - The elevation group chosen for the reserve does not exist in the lending market
    #[error("The elevation group chosen for the reserve does not exist in the lending market")]
    InvalidElevationGroup = 0x17B5,
    /// 6070 - The elevation group updated has wrong parameters set
    #[error("The elevation group updated has wrong parameters set")]
    InvalidElevationGroupConfig = 0x17B6,
    /// 6071 - The current obligation must have most or all its debt repaid before changing the elevation group
    #[error("The current obligation must have most or all its debt repaid before changing the elevation group")]
    UnhealthyElevationGroupLtv = 0x17B7,
    /// 6072 - Elevation group does not accept any new loans or any new borrows/withdrawals
    #[error("Elevation group does not accept any new loans or any new borrows/withdrawals")]
    ElevationGroupNewLoansDisabled = 0x17B8,
    /// 6073 - Reserve was deprecated, no longer usable
    #[error("Reserve was deprecated, no longer usable")]
    ReserveDeprecated = 0x17B9,
    /// 6074 - Referrer account not initialized
    #[error("Referrer account not initialized")]
    ReferrerAccountNotInitialized = 0x17BA,
    /// 6075 - Referrer account mint does not match the operation reserve mint
    #[error("Referrer account mint does not match the operation reserve mint")]
    ReferrerAccountMintMissmatch = 0x17BB,
    /// 6076 - Referrer account address is not a valid program address
    #[error("Referrer account address is not a valid program address")]
    ReferrerAccountWrongAddress = 0x17BC,
    /// 6077 - Referrer account referrer does not match the owner referrer
    #[error("Referrer account referrer does not match the owner referrer")]
    ReferrerAccountReferrerMissmatch = 0x17BD,
    /// 6078 - Referrer account missing for obligation with referrer
    #[error("Referrer account missing for obligation with referrer")]
    ReferrerAccountMissing = 0x17BE,
    /// 6079 - Insufficient referral fees to claim or no liquidity available
    #[error("Insufficient referral fees to claim or no liquidity available")]
    InsufficientReferralFeesToRedeem = 0x17BF,
    /// 6080 - CPI disabled for this instruction
    #[error("CPI disabled for this instruction")]
    CpiDisabled = 0x17C0,
    /// 6081 - Referrer short_url is not ascii alphanumeric
    #[error("Referrer short_url is not ascii alphanumeric")]
    ShortUrlNotAsciiAlphanumeric = 0x17C1,
    /// 6082 - Reserve is marked as obsolete
    #[error("Reserve is marked as obsolete")]
    ReserveObsolete = 0x17C2,
    /// 6083 - Obligation already part of the same elevation group
    #[error("Obligation already part of the same elevation group")]
    ElevationGroupAlreadyActivated = 0x17C3,
    /// 6084 - Obligation has a deposit or borrow in an obsolete reserve
    #[error("Obligation has a deposit or borrow in an obsolete reserve")]
    ObligationInObsoleteReserve = 0x17C4,
    /// 6085 - Referrer state owner does not match the given signer
    #[error("Referrer state owner does not match the given signer")]
    ReferrerStateOwnerMismatch = 0x17C5,
    /// 6086 - User metadata owner is already set
    #[error("User metadata owner is already set")]
    UserMetadataOwnerAlreadySet = 0x17C6,
    /// 6087 - This collateral cannot be liquidated (LTV set to 0)
    #[error("This collateral cannot be liquidated (LTV set to 0)")]
    CollateralNonLiquidatable = 0x17C7,
    /// 6088 - Borrowing is disabled
    #[error("Borrowing is disabled")]
    BorrowingDisabled = 0x17C8,
    /// 6089 - Cannot borrow above borrow limit
    #[error("Cannot borrow above borrow limit")]
    BorrowLimitExceeded = 0x17C9,
    /// 6090 - Cannot deposit above deposit limit
    #[error("Cannot deposit above deposit limit")]
    DepositLimitExceeded = 0x17CA,
    /// 6091 - Reserve does not accept any new borrows outside elevation group
    #[error("Reserve does not accept any new borrows outside elevation group")]
    BorrowingDisabledOutsideElevationGroup = 0x17CB,
    /// 6092 - Net value remaining too small
    #[error("Net value remaining too small")]
    NetValueRemainingTooSmall = 0x17CC,
    /// 6093 - Cannot get the obligation in a worse position
    #[error("Cannot get the obligation in a worse position")]
    WorseLtvBlocked = 0x17CD,
    /// 6094 - Cannot have more liabilities than assets in a position
    #[error("Cannot have more liabilities than assets in a position")]
    LiabilitiesBiggerThanAssets = 0x17CE,
    /// 6095 - Reserve state and token account cannot drift
    #[error("Reserve state and token account cannot drift")]
    ReserveTokenBalanceMismatch = 0x17CF,
    /// 6096 - Reserve token account has been unexpectedly modified
    #[error("Reserve token account has been unexpectedly modified")]
    ReserveVaultBalanceMismatch = 0x17D0,
    /// 6097 - Reserve internal state accounting has been unexpectedly modified
    #[error("Reserve internal state accounting has been unexpectedly modified")]
    ReserveAccountingMismatch = 0x17D1,
    /// 6098 - Borrowing above set utilization rate is disabled
    #[error("Borrowing above set utilization rate is disabled")]
    BorrowingAboveUtilizationRateDisabled = 0x17D2,
    /// 6099 - Liquidation must prioritize the debt with the highest borrow factor
    #[error("Liquidation must prioritize the debt with the highest borrow factor")]
    LiquidationBorrowFactorPriority = 0x17D3,
    /// 6100 - Liquidation must prioritize the collateral with the lowest liquidation LTV
    #[error("Liquidation must prioritize the collateral with the lowest liquidation LTV")]
    LiquidationLowestLiquidationLtvPriority = 0x17D4,
    /// 6101 - Elevation group borrow limit exceeded
    #[error("Elevation group borrow limit exceeded")]
    ElevationGroupBorrowLimitExceeded = 0x17D5,
    /// 6102 - The elevation group does not have a debt reserve defined
    #[error("The elevation group does not have a debt reserve defined")]
    ElevationGroupWithoutDebtReserve = 0x17D6,
    /// 6103 - The elevation group does not allow any collateral reserves
    #[error("The elevation group does not allow any collateral reserves")]
    ElevationGroupMaxCollateralReserveZero = 0x17D7,
    /// 6104 - In elevation group attempt to borrow from a reserve that is not the debt reserve
    #[error("In elevation group attempt to borrow from a reserve that is not the debt reserve")]
    ElevationGroupHasAnotherDebtReserve = 0x17D8,
    /// 6105 - The elevation group's debt reserve cannot be used as a collateral reserve
    #[error("The elevation group's debt reserve cannot be used as a collateral reserve")]
    ElevationGroupDebtReserveAsCollateral = 0x17D9,
    /// 6106 - Obligation have more collateral than the maximum allowed by the elevation group
    #[error("Obligation have more collateral than the maximum allowed by the elevation group")]
    ObligationCollateralExceedsElevationGroupLimit = 0x17DA,
    /// 6107 - Obligation is an elevation group but have more than one debt reserve
    #[error("Obligation is an elevation group but have more than one debt reserve")]
    ObligationElevationGroupMultipleDebtReserve = 0x17DB,
    /// 6108 - Mint has a token (2022) extension that is not supported
    #[error("Mint has a token (2022) extension that is not supported")]
    UnsupportedTokenExtension = 0x17DC,
    /// 6109 - Can't have an spl token mint with a t22 account
    #[error("Can't have an spl token mint with a t22 account")]
    InvalidTokenAccount = 0x17DD,
    /// 6110 - Can't deposit into this reserve outside elevation group
    #[error("Can't deposit into this reserve outside elevation group")]
    DepositDisabledOutsideElevationGroup = 0x17DE,
    /// 6111 - Cannot calculate referral amount due to slots mismatch
    #[error("Cannot calculate referral amount due to slots mismatch")]
    CannotCalculateReferralAmountDueToSlotsMismatch = 0x17DF,
    /// 6112 - Obligation owners must match
    #[error("Obligation owners must match")]
    ObligationOwnersMustMatch = 0x17E0,
    /// 6113 - Obligations must match
    #[error("Obligations must match")]
    ObligationsMustMatch = 0x17E1,
    /// 6114 - Lending markets must match
    #[error("Lending markets must match")]
    LendingMarketsMustMatch = 0x17E2,
    /// 6115 - Obligation is already marked for deleveraging
    #[error("Obligation is already marked for deleveraging")]
    ObligationCurrentlyMarkedForDeleveraging = 0x17E3,
    /// 6116 - Maximum withdrawable value of this collateral is zero, LTV needs improved
    #[error("Maximum withdrawable value of this collateral is zero, LTV needs improved")]
    MaximumWithdrawValueZero = 0x17E4,
    /// 6117 - No max LTV 0 assets allowed in deposits for repay and withdraw
    #[error("No max LTV 0 assets allowed in deposits for repay and withdraw")]
    ZeroMaxLtvAssetsInDeposits = 0x17E5,
    /// 6118 - Withdrawing must prioritize the collateral with the lowest reserve max-LTV
    #[error("Withdrawing must prioritize the collateral with the lowest reserve max-LTV")]
    LowestLtvAssetsPriority = 0x17E6,
    /// 6119 - Cannot get the obligation liquidatable
    #[error("Cannot get the obligation liquidatable")]
    WorseLtvThanUnhealthyLtv = 0x17E7,
    /// 6120 - Farm accounts to refresh are missing
    #[error("Farm accounts to refresh are missing")]
    FarmAccountsMissing = 0x17E8,
    /// 6121 - Repay amount is too small to satisfy the mandatory full liquidation
    #[error("Repay amount is too small to satisfy the mandatory full liquidation")]
    RepayTooSmallForFullLiquidation = 0x17E9,
    /// 6122 - Liquidator provided repay amount lower than required by liquidation rules
    #[error("Liquidator provided repay amount lower than required by liquidation rules")]
    InsufficientRepayAmount = 0x17EA,
    /// 6123 - Obligation order of the given index cannot exist
    #[error("Obligation order of the given index cannot exist")]
    OrderIndexOutOfBounds = 0x17EB,
    /// 6124 - Given order configuration has wrong parameters
    #[error("Given order configuration has wrong parameters")]
    InvalidOrderConfiguration = 0x17EC,
    /// 6125 - Given order configuration cannot be used with the current state of the obligation
    #[error("Given order configuration cannot be used with the current state of the obligation")]
    OrderConfigurationNotSupportedByObligation = 0x17ED,
    /// 6126 - Single debt, single collateral obligation orders have to be cancelled before changing the deposit/borrow count
    #[error("Single debt, single collateral obligation orders have to be cancelled before changing the deposit/borrow count")]
    OperationNotPermittedWithCurrentObligationOrders = 0x17EE,
    /// 6127 - Cannot update lending market because it is set as immutable
    #[error("Cannot update lending market because it is set as immutable")]
    OperationNotPermittedMarketImmutable = 0x17EF,
    /// 6128 - Creation of new orders is disabled
    #[error("Creation of new orders is disabled")]
    OrderCreationDisabled = 0x17F0,
    /// 6129 - Cannot initialize global config because there is no upgrade authority to the program
    #[error("Cannot initialize global config because there is no upgrade authority to the program")]
    NoUpgradeAuthority = 0x17F1,
}

impl From<KaminoLendingError> for solana_program_error::ProgramError {
    fn from(e: KaminoLendingError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}

