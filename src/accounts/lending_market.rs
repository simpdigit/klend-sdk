//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use crate::generated::types::ElevationGroup;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LendingMarket {
pub discriminator: [u8; 8],
/// Version of lending market
pub version: u64,
/// Bump seed for derived authority address
pub bump_seed: u64,
/// Owner authority which can add new reserves
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub lending_market_owner: Pubkey,
/// Temporary cache of the lending market owner, used in update_lending_market_owner
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub lending_market_owner_cached: Pubkey,
/// Currency market prices are quoted in
/// e.g. "USD" null padded (`*b"USD\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"`) or a SPL token mint pubkey
pub quote_currency: [u8; 32],
/// Referral fee for the lending market, as bps out of the total protocol fee
pub referral_fee_bps: u16,
pub emergency_mode: u8,
/// Whether the obligations on this market should be subject to auto-deleveraging after deposit
/// or borrow limit is crossed.
/// Besides this flag, the particular reserve's flag also needs to be enabled (logical `AND`).
/// **NOTE:** this also affects the individual "target LTV" deleveraging.
pub autodeleverage_enabled: u8,
pub borrow_disabled: u8,
/// Refresh price from oracle only if it's older than this percentage of the price max age.
/// e.g. if the max age is set to 100s and this is set to 80%, the price will be refreshed if it's older than 80s.
/// Price is always refreshed if this set to 0.
pub price_refresh_trigger_to_max_age_pct: u8,
/// Percentage of the total borrowed value in an obligation available for liquidation
pub liquidation_max_debt_close_factor_pct: u8,
/// Minimum acceptable unhealthy LTV before max_debt_close_factor_pct becomes 100%
pub insolvency_risk_unhealthy_ltv_pct: u8,
/// Minimum liquidation value threshold triggering full liquidation for an obligation
pub min_full_liquidation_value_threshold: u64,
/// Max allowed liquidation value in one ix call
pub max_liquidatable_debt_market_value_at_once: u64,
/// [DEPRECATED] Global maximum unhealthy borrow value allowed for any obligation
pub reserved0: [u8; 8],
/// Global maximum allowed borrow value allowed for any obligation
pub global_allowed_borrow_value: u64,
/// The address of the risk council, in charge of making parameter and risk decisions on behalf of the protocol
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub risk_council: Pubkey,
/// [DEPRECATED] Reward points multiplier per obligation type
pub reserved1: [u8; 8],
/// Elevation groups are used to group together reserves that have the same risk parameters and can bump the ltv and liquidation threshold
pub elevation_groups: [ElevationGroup; 32],
#[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
pub elevation_group_padding: [u64; 90],
/// Min net value accepted to be found in a position after any lending action in an obligation (scaled by quote currency decimals)
pub min_net_value_in_obligation_sf: u128,
/// Minimum value to enforce smallest ltv priority checks on the collateral reserves on liquidation
pub min_value_skip_liquidation_ltv_checks: u64,
/// Market name, zero-padded.
pub name: [u8; 32],
/// Minimum value to enforce highest borrow factor priority checks on the debt reserves on liquidation
pub min_value_skip_liquidation_bf_checks: u64,
/// Time (in seconds) that must pass before liquidation is allowed on an obligation that has
/// been individually marked for auto-deleveraging (by the risk council).
pub individual_autodeleverage_margin_call_period_secs: u64,
/// Minimum amount of deposit at creation of a reserve to prevent artificial inflation
/// Note: this amount cannot be recovered, the ctoken associated are never minted
pub min_initial_deposit_amount: u64,
/// Whether the obligation orders should be evaluated during liquidations.
pub obligation_order_execution_enabled: u8,
/// Whether the lending market is set as immutable.
pub immutable: u8,
/// Whether new obligation orders can be created.
/// Note: updating or cancelling existing orders is *not* affected by this flag.
pub obligation_order_creation_enabled: u8,
pub padding2: [u8; 5],
#[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
pub padding1: [u64; 169],
}


pub const LENDING_MARKET_DISCRIMINATOR: [u8; 8] = [246, 114, 50, 98, 72, 157, 28, 120];

impl LendingMarket {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_account_info::AccountInfo<'a>> for LendingMarket {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "fetch")]
pub fn fetch_lending_market(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<LendingMarket>, std::io::Error> {
  let accounts = fetch_all_lending_market(rpc, &[*address])?;
  Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_lending_market(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<LendingMarket>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<LendingMarket>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      let account = accounts[i].as_ref()
        .ok_or(std::io::Error::new(std::io::ErrorKind::Other, format!("Account not found: {}", address)))?;
      let data = LendingMarket::from_bytes(&account.data)?;
      decoded_accounts.push(crate::shared::DecodedAccount { address, account: account.clone(), data });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_lending_market(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<LendingMarket>, std::io::Error> {
    let accounts = fetch_all_maybe_lending_market(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_lending_market(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<LendingMarket>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<LendingMarket>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      if let Some(account) = accounts[i].as_ref() {
        let data = LendingMarket::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::MaybeAccount::Exists(crate::shared::DecodedAccount { address, account: account.clone(), data }));
      } else {
        decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
      }
    }
  Ok(decoded_accounts)
}

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountDeserialize for LendingMarket {
      fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
      }
  }

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountSerialize for LendingMarket {}

  #[cfg(feature = "anchor")]
  impl anchor_lang::Owner for LendingMarket {
      fn owner() -> Pubkey {
        crate::KAMINO_LENDING_ID
      }
  }

  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::IdlBuild for LendingMarket {}

  
  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::Discriminator for LendingMarket {
    const DISCRIMINATOR: &[u8] = &[0; 8];
  }

