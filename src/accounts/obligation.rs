//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::LastUpdate;
use solana_pubkey::Pubkey;
use crate::generated::types::ObligationCollateral;
use crate::generated::types::ObligationLiquidity;
use crate::generated::types::ObligationOrder;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Lending market obligation state

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Obligation {
pub discriminator: [u8; 8],
/// Version of the struct
pub tag: u64,
/// Last update to collateral, liquidity, or their market values
pub last_update: LastUpdate,
/// Lending market address
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub lending_market: Pubkey,
/// Owner authority which can borrow liquidity
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub owner: Pubkey,
/// Deposited collateral for the obligation, unique by deposit reserve address
pub deposits: [ObligationCollateral; 8],
/// Worst LTV for the collaterals backing the loan, represented as a percentage
pub lowest_reserve_deposit_liquidation_ltv: u64,
/// Market value of deposits (scaled fraction)
pub deposited_value_sf: u128,
/// Borrowed liquidity for the obligation, unique by borrow reserve address
pub borrows: [ObligationLiquidity; 5],
/// Risk adjusted market value of borrows/debt (sum of price * borrowed_amount * borrow_factor) (scaled fraction)
pub borrow_factor_adjusted_debt_value_sf: u128,
/// Market value of borrows - used for max_liquidatable_borrowed_amount (scaled fraction)
pub borrowed_assets_market_value_sf: u128,
/// The maximum borrow value at the weighted average loan to value ratio (scaled fraction)
pub allowed_borrow_value_sf: u128,
/// The dangerous borrow value at the weighted average liquidation threshold (scaled fraction)
pub unhealthy_borrow_value_sf: u128,
/// The asset tier of the deposits
pub deposits_asset_tiers: [u8; 8],
/// The asset tier of the borrows
pub borrows_asset_tiers: [u8; 5],
/// The elevation group id the obligation opted into.
pub elevation_group: u8,
/// The number of obsolete reserves the obligation has a deposit in
pub num_of_obsolete_deposit_reserves: u8,
/// Marked = 1 if borrows array is not empty, 0 = borrows empty
pub has_debt: u8,
/// Wallet address of the referrer
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub referrer: Pubkey,
/// Marked = 1 if borrowing disabled, 0 = borrowing enabled
pub borrowing_disabled: u8,
/// A target LTV set by the risk council when marking this obligation for deleveraging.
/// Only effective when `deleveraging_margin_call_started_slot != 0`.
pub autodeleverage_target_ltv_pct: u8,
/// The lowest max LTV found amongst the collateral deposits
pub lowest_reserve_deposit_max_ltv_pct: u8,
/// The number of obsolete reserves the obligation has a borrow in
pub num_of_obsolete_borrow_reserves: u8,
pub reserved: [u8; 4],
pub highest_borrow_factor_pct: u64,
/// A timestamp at which the risk council most-recently marked this obligation for deleveraging.
/// Zero if not currently subject to deleveraging.
pub autodeleverage_margin_call_started_timestamp: u64,
/// Owner-defined, liquidator-executed orders applicable to this obligation.
/// Typical use-cases would be a stop-loss and a take-profit (possibly co-existing).
pub orders: [ObligationOrder; 2],
#[cfg_attr(feature = "serde", serde(with = "serde_big_array::BigArray"))]
pub padding3: [u64; 93],
}


pub const OBLIGATION_DISCRIMINATOR: [u8; 8] = [168, 206, 141, 106, 88, 76, 172, 167];

impl Obligation {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_account_info::AccountInfo<'a>> for Obligation {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "fetch")]
pub fn fetch_obligation(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<Obligation>, std::io::Error> {
  let accounts = fetch_all_obligation(rpc, &[*address])?;
  Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_obligation(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<Obligation>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<Obligation>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      let account = accounts[i].as_ref()
        .ok_or(std::io::Error::new(std::io::ErrorKind::Other, format!("Account not found: {}", address)))?;
      let data = Obligation::from_bytes(&account.data)?;
      decoded_accounts.push(crate::shared::DecodedAccount { address, account: account.clone(), data });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_obligation(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<Obligation>, std::io::Error> {
    let accounts = fetch_all_maybe_obligation(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_obligation(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<Obligation>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<Obligation>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      if let Some(account) = accounts[i].as_ref() {
        let data = Obligation::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::MaybeAccount::Exists(crate::shared::DecodedAccount { address, account: account.clone(), data }));
      } else {
        decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
      }
    }
  Ok(decoded_accounts)
}

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountDeserialize for Obligation {
      fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
      }
  }

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountSerialize for Obligation {}

  #[cfg(feature = "anchor")]
  impl anchor_lang::Owner for Obligation {
      fn owner() -> Pubkey {
        crate::KAMINO_LENDING_ID
      }
  }

  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::IdlBuild for Obligation {}

  
  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::Discriminator for Obligation {
    const DISCRIMINATOR: &[u8] = &[0; 8];
  }

